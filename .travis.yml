# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0
#
# http://docs.travis-ci.com/user/customizing-the-build/
# http://lint.travis-ci.org/

os:       linux
dist:     xenial
language: generic
services: docker

cache:
  directories:
    - ~/cache/
    - ~/beast/
    # We use $PIPE to carry cache context along job pipelines (workflows)
    # https://docs.travis-ci.com/user/caching/

# Common scripts
install: |
  touch ~/cache/"$PIPELINE-$TRAVIS_BUILD_STAGE_NAME" && ls -l ~/cache/ && cd ~/beast/

# Job pipelines
jobs:
  include:

    # == 'Quick' Pipeline ==
    # Generate all possible source code linting reports,
    # sort slow jobs into separate stages to avoid timeouts.
    - stage: Stage1
      name: "Quick-1 (autogen.sh)"
      env: PIPELINE=clang
      before_install: |
        uname -a && pwd && echo nproc=`nproc` && rm -v -rf ~/cache/* ~/beast &&
        travis_retry git fetch --unshallow && cd .. && mv beast ~/
      script: |
        misc/cibuild.sh quick
    - stage: Stage2
      name: "Quick-2 (cppcheck + scan-build)"
      env: PIPELINE=clang
      script: |
        misc/cibuild.sh cppcheck scan-build
    - stage: Stage3
      name: "Quick-3 (clang-tidy)"
      env: PIPELINE=clang
      script: |
        misc/cibuild.sh clang-tidy
    - stage: Stage4
      name: "Quick-4 (listunused + listhacks + bintray)"
      env: PIPELINE=clang
      script: |
        echo "$BINTRAY_API_KEY" > .bintray_api_key &&
        misc/cibuild.sh listunused listhacks bintray

    # == 'Gcc' Pipeline ==
    # Build a highly optimized Gcc and upload it.
    - stage: Stage1
      name: "Gcc-1 (autogen.sh)"
      env: PIPELINE=Gcc
      before_install: |
        uname -a && pwd && echo nproc=`nproc` && rm -v -rf ~/cache/* ~/beast &&
        travis_retry git fetch --unshallow && cd .. && mv beast ~/
      script: |
        misc/cibuild.sh gcc
    - stage: Stage2
      name: "Gcc-2 (appimage)"
      env: PIPELINE=Gcc
      script: |
        misc/cibuild.sh appimage
    - stage: Stage3
      name: "Gcc-3 (check + bintray)"
      env: PIPELINE=Gcc
      script: |
        misc/cibuild.sh check && {
          echo "$BINTRAY_API_KEY" > .bintray_api_key &&
          test "$TRAVIS_BRANCH^$TRAVIS_PULL_REQUEST" != "master^false" ||
          misc/cibuild.sh bintray ; }

notifications:
  irc:
    channels:
      - "irc.gimp.org#beast"
    on_success: always
    on_failure: always
    skip_join: true
  email: false
    #recipients:
    #  - beast@gnome.org
    #on_success: never
    #on_failure: change
