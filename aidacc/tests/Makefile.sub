# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

tests_checktargets =
tests_binaries     =

# == t201-basics ==
tests_binaries += t201-basics
CLEANFILES += tests/t201-basics.o

# == t301-testpass-idl-test ==
t301-testpass-idl-test: tests/t301-pass.idl $(AIDACC)
	$(QTEST)
	$(Q) $(AIDACC) $< # --aida-debug $<
tests_checktargets += t301-testpass-idl-test

# == t302-testfail-idl-test ==
t302-testfail-idl-test: tests/t302-fail.idl tests/t302-fail.ref $(AIDACC)
	$(QTEST)
	$(Q) $(AIDACC) --aida-fail-file-test $<> $@.out
	$(Q) sed 's/\(:[0-9]\+:[0-9]\+: Trying to find one of \).*/\1.../' < $@.out > $@.notokens && mv $@.notokens $@.out
	$(Q) diff -up tests/t302-fail.ref $@.out && rm -f $@.out
tests_checktargets += t302-testfail-idl-test

# == t303-explore ==
tests_binaries += t303-explore
tests_t303_generated                 =      \
        tests/t303-explore-srvt.hh          \
        tests/t303-explore-srvt.cc          \
        tests/t303-explore-clnt.hh          \
        tests/t303-explore-clnt.cc
# MAKE(1) supports parallel execution of a multiple-targets-rule *only* for implicit rules (with '%')
tests/t303-%-clnt.hh tests/t303-%-clnt.cc tests/t303-%-srvt.hh tests/t303-%-srvt.cc: tests/t303-%.idl $(AIDACC_CXXSTUB_PY) $(AIDACC)
	$(QGEN)
	$(Q) $(AIDACC) -x CxxStub -G clienthh -G strip-path=$(topdir)/ $< -o tests/t303-$*-clnt.hh
	$(Q) $(AIDACC) -x CxxStub -G clientcc -G strip-path=$(topdir)/ $< -o tests/t303-$*-clnt.cc
	$(Q) sed -i -e '1i#define _(x) x' tests/t303-$*-clnt.cc
	$(Q) $(AIDACC) -x CxxStub -G serverhh -G strip-path=$(topdir)/ $< -o tests/t303-$*-srvt.hh
	$(Q) $(AIDACC) -x CxxStub -G servercc -G strip-path=$(topdir)/ $< -o tests/t303-$*-srvt.cc
	$(Q) sed -i -e '1i#define _(x) x' tests/t303-$*-srvt.cc
CLEANFILES += $(tests_t303_generated)
tests/t303-explore.cc: $(tests_t303_generated)

# == t304-testpass-cxx-test ==
# test CxxStub Generation for Client & Server
tests/t304-testpass-cxx-server: tests/t301-pass.idl tests/t304-cxxserver.ref $(AIDACC)
	$(QTEST)
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G aidaids -G strip-path=$(topdir)/ \
	  $< -o $@.out
	$(Q) diff -up tests/t304-cxxserver.ref $@.out && rm -f $@.out
tests/t304-testpass-cxx-client: tests/t301-pass.idl tests/t304-cxxclient.ref $(AIDACC)
	$(QTEST)
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  $< -o $@.out
	$(Q) diff -up tests/t304-cxxclient.ref $@.out && rm -f $@.out
t304-testpass-cxx-test: tests/t304-testpass-cxx-server tests/t304-testpass-cxx-client
tests_checktargets += t304-testpass-cxx-test

# == t305-testpass-compile-test ==
tests/t305-testpass-compile-server: tests/t301-pass.idl tests/t301-inc2.idl tests/t301-inc1.idl $(AIDACC)
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  tests/t301-inc2.idl -o tests/t305-inc2-server.gen.cc
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  tests/t301-inc1.idl -o tests/t305-inc1-server.gen.cc
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G serverhh -G servercc -G strip-path=$(topdir)/ \
	  tests/t301-pass.idl -o tests/t305-testpass-server.gen.cc
	$(Q) sed -i -e '1i#include "t305-inc2-server.gen.cc"' \
	            -e '1i#include "t305-inc1-server.gen.cc"' \
		    -e '1i#define _(x) x' tests/t305-testpass-server.gen.cc
	$(Q) $(CXXCOMPILE) $(CXXFLAGS) tests/t305-testpass-server.gen.cc -c
CLEANFILES += tests/t305-inc2-server.gen.cc tests/t305-inc1-server.gen.cc tests/t305-testpass-server.gen.cc
tests/t305-testpass-compile-client: tests/t301-pass.idl tests/t301-inc2.idl tests/t301-inc1.idl $(AIDACC)
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  tests/t301-inc2.idl -o tests/t305-inc2-client.gen.cc
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  tests/t301-inc1.idl -o tests/t305-inc1-client.gen.cc
	$(Q) $(AIDACC) -x CxxStub -G iface-prefix=I_ -G clienthh -G clientcc -G strip-path=$(topdir)/ \
	  tests/t301-pass.idl -o tests/t305-testpass-client.gen.cc
	$(Q) sed -i -e '1i#include "t305-inc2-client.gen.cc"' \
		    -e '1i#include "t305-inc1-client.gen.cc"' \
		    -e '1i#define _(x) x' tests/t305-testpass-client.gen.cc
	$(Q) $(CXXCOMPILE) $(CXXFLAGS) tests/t305-testpass-client.gen.cc -c ; eval "$$TSTDIAGNOSE"
CLEANFILES += tests/t305-inc2-client.gen.cc tests/t305-inc1-client.gen.cc tests/t305-testpass-client.gen.cc
t305-testpass-compile-test: tests/t305-testpass-compile-server tests/t305-testpass-compile-client
tests_checktargets += t305-testpass-compile-test

# == t204-aidatests.cc ==
tests_binaries += t204-aidatests
CLEANFILES += tests/t204-aidatests.o

# == tests_binaries ==
define tests_run_RULE
all_targets += tests/$(1)
.PHONY: tests/run-$(1)
$(1)--testexec: tests/$(1)
	@echo '  EXEC    ' $(1)
	$$(Q) tests/$(1)
tests_checktargets += $(1)--testexec
CLEANFILES += tests/$(1)
.PHONY: tests/run-$(1)
endef
$(foreach PRG,$(tests_binaries),$(eval $(call tests_run_RULE,$(PRG))))
tests/%: tests/%.o aidacc/aida.o tests/testing.hh aidacc/aida.hh
	$(CXXCOMPILE) $(CXXFLAGS) $< aidacc/aida.o -o $@

# == check-tests ==
check-tests: $(sort $(tests_checktargets))
check-local: check-tests
.PHONY: check-tests
