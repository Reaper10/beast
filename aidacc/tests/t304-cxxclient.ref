// --- Generated by AidaCxxStub ---
#ifndef __CLNT__aidacc_tests_t304_testpass_idl
#define __CLNT__aidacc_tests_t304_testpass_idl

#ifndef __aidacc_tests_t304_testpass_idl_ifx__
#define __aidacc_tests_t304_testpass_idl_ifx__(...) /**/
#endif

#include <aidacc/aida.hh>

namespace MandatoryNamespace {

/// @cond GeneratedEnums
enum class Enum1 : int64_t {
  E1_A = 1,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum1) { return "MandatoryNamespace::Enum1"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum1  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum1 &e) { e = Enum1 (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum1);
/// @endcond

/// @cond GeneratedEnums
enum class Enum1c : int64_t {
  E1C_A = 1,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum1c) { return "MandatoryNamespace::Enum1c"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum1c  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum1c &e) { e = Enum1c (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum1c);
/// @endcond

/// @cond GeneratedEnums
enum class Enum2 : int64_t {
  E2_A = 1,
  E2_B = 2,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum2) { return "MandatoryNamespace::Enum2"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum2  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum2 &e) { e = Enum2 (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum2);
/// @endcond

/// @cond GeneratedEnums
enum class Enum2c : int64_t {
  E2C_A = 1,
  E2C_B = 2,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum2c) { return "MandatoryNamespace::Enum2c"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum2c  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum2c &e) { e = Enum2c (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum2c);
/// @endcond

/// @cond GeneratedEnums
enum class Enum3 : int64_t {
  E3_A = 1,
  E3_B = 2,
  E3_C = 3,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum3) { return "MandatoryNamespace::Enum3"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum3  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum3 &e) { e = Enum3 (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum3);
/// @endcond

/// @cond GeneratedEnums
enum class Enum3c : int64_t {
  E3C_A = 1,
  E3C_B = 2,
  E3C_C = 3,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum3c) { return "MandatoryNamespace::Enum3c"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum3c  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum3c &e) { e = Enum3c (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum3c);
/// @endcond

/// @cond GeneratedEnums
enum class Enum4a : int64_t {
  E4A_A = 1,
  E4A_B = 2,
  E4A_C = 3,
  E4A_D = 4,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum4a) { return "MandatoryNamespace::Enum4a"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum4a  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum4a &e) { e = Enum4a (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum4a);
/// @endcond

/// @cond GeneratedEnums
enum class Enum4b : int64_t {
  E4B_A = 1,
  E4B_B = 2,
  E4B_C = 3,
  E4B_D = 4,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum4b) { return "MandatoryNamespace::Enum4b"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum4b  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum4b &e) { e = Enum4b (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum4b);
/// @endcond

/// @cond GeneratedEnums
enum class Enum4c : int64_t {
  E4C_A = 1,
  E4C_B = 2,
  E4C_C = 3,
  E4C_D = 4,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum4c) { return "MandatoryNamespace::Enum4c"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum4c  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum4c &e) { e = Enum4c (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum4c);
/// @endcond

/// @cond GeneratedEnums
enum class Enum4d : int64_t {
  E4D_A = 1,
  E4D_B = 2,
  E4D_C = 3,
  E4D_D = 4,
};
inline const char* operator->* (::Aida::IntrospectionTypename, Enum4d) { return "MandatoryNamespace::Enum4d"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  Enum4d  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, Enum4d &e) { e = Enum4d (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (Enum4d);
/// @endcond

/// @cond GeneratedEnums
enum class ExtensiveEnum : int64_t {
  V1a = 1,
  V1b = 1,
  V2 = 2,
  V3 = 3,
  V4 = 4,
  V5 = 5, // "V5"
  V6 = 6, // "V6"
  V7 = 7, // _("V7")
  V8 = 8, // _("V8")
  V9 = 9,
  V10 = 10,
  V11 = 11,
  V12 = 12,
  V13 = 13,
  V14 = 14,
  V15 = 15, // "V15"
  V16 = 16, // "V16"
  V17 = 17, // _("V17")
  V18 = 18, // _("V18")
  V20 = 20,
  V21 = 21,
  V22 = 22,
  V23 = 23,
  V24 = 24,
  V25 = (-9223372036854775807 - 1),
  V26 = 9223372036854775807,
  V27 = 9223372036854775807,
  V28 = -28,
  V30 = 42,
  V31 = 43,
  V32 = 42,
  V33 = 43,
  V34 = 44, // "foo"
  V35 = 35,
  V36 = 42, // "foo4"
};
inline const char* operator->* (::Aida::IntrospectionTypename, ExtensiveEnum) { return "MandatoryNamespace::ExtensiveEnum"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  ExtensiveEnum  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, ExtensiveEnum &e) { e = ExtensiveEnum (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (ExtensiveEnum);
/// @endcond
} // MandatoryNamespace

namespace InterfaceTests {

/// @cond GeneratedEnums
enum class QuickEnum : int64_t {
  ZERO = 0,
};
inline const char* operator->* (::Aida::IntrospectionTypename, QuickEnum) { return "InterfaceTests::QuickEnum"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  QuickEnum  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, QuickEnum &e) { e = QuickEnum (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (QuickEnum);
/// @endcond
} // InterfaceTests

namespace RapicornAidaTest {

/// @cond GeneratedEnums
enum class ClickType : int64_t {
  CLICK_ON_PRESS = 1,
  CLICK_ON_RELEASE = 2,
  CLICK_SLOW_REPEAT = 3,
  CLICK_FAST_REPEAT = 4,
  CLICK_KEY_REPEAT = 5,
};
inline const char* operator->* (::Aida::IntrospectionTypename, ClickType) { return "RapicornAidaTest::ClickType"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  ClickType  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, ClickType &e) { e = ClickType (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (ClickType);
/// @endcond

/// @cond GeneratedEnums
enum class MathExpressions : int64_t {
  RESULT_2 = 2,
  RESULT_5 = 5,
  RESULT_8 = 8,
  RESULT_6 = 6,
  RESULT_7 = 7,
  RESULT_16 = 16,
  RESULT_3 = 3,
  RESULT_24 = 24,
  RESULT_13 = 13,
  RESULT_m2 = -2,
  RESULT_77 = 77,
  RESULT_511 = 511,
};
inline const char* operator->* (::Aida::IntrospectionTypename, MathExpressions) { return "RapicornAidaTest::MathExpressions"; }
inline void operator<<= (Aida::ProtoMsg &__p_,  MathExpressions  e) { __p_ <<= Aida::EnumValue (e); }
inline void operator>>= (Aida::ProtoReader &__f_, MathExpressions &e) { e = MathExpressions (__f_.pop_evalue()); }
AIDA_ENUM_DEFINE_ARITHMETIC_EQ (MathExpressions);
/// @endcond
} // RapicornAidaTest

namespace Aida {
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum1> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum1c> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum2> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum2c> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum3> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum3c> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum4a> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum4b> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum4c> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::Enum4d> ();
template<> const EnumInfo& enum_info<MandatoryNamespace::ExtensiveEnum> ();
template<> const EnumInfo& enum_info<InterfaceTests::QuickEnum> ();
template<> const EnumInfo& enum_info<RapicornAidaTest::ClickType> ();
template<> const EnumInfo& enum_info<RapicornAidaTest::MathExpressions> ();
} // Aida

namespace MandatoryNamespace {

class FirstInterfaceHandle : public virtual Aida::RemoteHandle
{
  friend                        class FirstInterfaceIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~FirstInterfaceHandle () override;
  /*copy*/                      FirstInterfaceHandle (const FirstInterfaceHandle&) = default;
  FirstInterfaceHandle&         operator= (const FirstInterfaceHandle&) = default;
  static FirstInterfaceHandle   __cast__ (const RemoteHandle &smh);
  explicit                      FirstInterfaceHandle ();
  void                          void_func            ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( FirstInterfaceIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    FirstInterfaceHandle (const std::shared_ptr<FirstInterfaceIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef FirstInterfaceHandle FirstInterfaceH; ///< Convenience alias for the IDL type FirstInterface.
typedef ::Aida::ScopedHandle<FirstInterfaceH> FirstInterfaceS;

class XFooRecord
{
public:
  /// @cond GeneratedFields
  bool                          single_bool;
  int                           single_num;
  int64_t                       num64;
  double                        single_float;
  std::string                   single_string;
  int                           sibling1;
  int                           sibling2;
  int                           multi1;
  int                           multi2;
  int                           multi3;
  int                           multi4;
  ExtensiveEnum                 enum_field;
  Aida::RemoteMember<FirstInterfaceHandle> iface1;
  Aida::RemoteMember<FirstInterfaceHandle> iface2;
  Aida::RemoteMember<FirstInterfaceHandle> iface3;
  Aida::Any                     any1;
  Aida::Any                     any2;
  Aida::Any                     any3;
  /// @endcond
  inline                        XFooRecord () { single_bool = 0; single_num = 0; num64 = 0; single_float = 0; sibling1 = 0; sibling2 = 0; multi1 = 0; multi2 = 0; multi3 = 0; multi4 = 0; enum_field = ExtensiveEnum (0); }
  inline                        XFooRecord (const Aida::AnyRec &ad) : XFooRecord() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::XFooRecord"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const XFooRecord &other) const;
  bool                          operator!=   (const XFooRecord &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<XFooRecord*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (single_bool, "single_bool");
    _visitor_ (single_num, "single_num");
    _visitor_ (num64, "num64");
    _visitor_ (single_float, "single_float");
    _visitor_ (single_string, "single_string");
    _visitor_ (sibling1, "sibling1");
    _visitor_ (sibling2, "sibling2");
    _visitor_ (multi1, "multi1");
    _visitor_ (multi2, "multi2");
    _visitor_ (multi3, "multi3");
    _visitor_ (multi4, "multi4");
    _visitor_ (enum_field, "enum_field");
    _visitor_ (iface1, "iface1");
    _visitor_ (iface2, "iface2");
    _visitor_ (iface3, "iface3");
    _visitor_ (any1, "any1");
    _visitor_ (any2, "any2");
    _visitor_ (any3, "any3");
  }
};
void operator<<= (Aida::ProtoMsg&, const XFooRecord&);
void operator>>= (Aida::ProtoReader&, XFooRecord&);

class XFooSequence : public std::vector<bool>
{
public:
  typedef std::vector<bool> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      XFooSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        XFooSequence () = default;
  inline                        XFooSequence (const Aida::AnySeq &as) : XFooSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::XFooSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<XFooSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const XFooSequence&);
void operator>>= (Aida::ProtoReader&, XFooSequence&);

class IntSequence : public std::vector<int>
{
public:
  typedef std::vector<int> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      IntSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        IntSequence () = default;
  inline                        IntSequence (const Aida::AnySeq &as) : IntSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::IntSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<IntSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const IntSequence&);
void operator>>= (Aida::ProtoReader&, IntSequence&);

class FloatSequence : public std::vector<double>
{
public:
  typedef std::vector<double> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      FloatSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        FloatSequence () = default;
  inline                        FloatSequence (const Aida::AnySeq &as) : FloatSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::FloatSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<FloatSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const FloatSequence&);
void operator>>= (Aida::ProtoReader&, FloatSequence&);

class StringSequence : public std::vector<std::string>
{
public:
  typedef std::vector<std::string> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      StringSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        StringSequence () = default;
  inline                        StringSequence (const Aida::AnySeq &as) : StringSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::StringSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<StringSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const StringSequence&);
void operator>>= (Aida::ProtoReader&, StringSequence&);

class ExtensiveEnumSequence : public std::vector<ExtensiveEnum>
{
public:
  typedef std::vector<ExtensiveEnum> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      ExtensiveEnumSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        ExtensiveEnumSequence () = default;
  inline                        ExtensiveEnumSequence (const Aida::AnySeq &as) : ExtensiveEnumSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::ExtensiveEnumSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<ExtensiveEnumSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const ExtensiveEnumSequence&);
void operator>>= (Aida::ProtoReader&, ExtensiveEnumSequence&);

class RecordSequence : public std::vector<XFooRecord>
{
public:
  typedef std::vector<XFooRecord> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      RecordSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        RecordSequence () = default;
  inline                        RecordSequence (const Aida::AnySeq &as) : RecordSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::RecordSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<RecordSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const RecordSequence&);
void operator>>= (Aida::ProtoReader&, RecordSequence&);

class SequenceSequence : public std::vector<IntSequence>
{
public:
  typedef std::vector<IntSequence> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      SequenceSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        SequenceSequence () = default;
  inline                        SequenceSequence (const Aida::AnySeq &as) : SequenceSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::SequenceSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<SequenceSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const SequenceSequence&);
void operator>>= (Aida::ProtoReader&, SequenceSequence&);

class InterfaceSequence : public std::vector<Aida::RemoteMember<FirstInterfaceHandle>>
{
public:
  typedef std::vector<Aida::RemoteMember<FirstInterfaceHandle>> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      InterfaceSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        InterfaceSequence () = default;
  inline                        InterfaceSequence (const Aida::AnySeq &as) : InterfaceSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::InterfaceSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<InterfaceSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const InterfaceSequence&);
void operator>>= (Aida::ProtoReader&, InterfaceSequence&);

class AnySequence : public std::vector<Aida::Any>
{
public:
  typedef std::vector<Aida::Any> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      AnySequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        AnySequence () = default;
  inline                        AnySequence (const Aida::AnySeq &as) : AnySequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::AnySequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<AnySequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const AnySequence&);
void operator>>= (Aida::ProtoReader&, AnySequence&);

class NestedTypesRec;

class NestedTypesSeq;

class NestedTypesRec
{
public:
  /// @cond GeneratedFields
  XFooRecord                    rec;
  XFooSequence                  seq;
  /// @endcond
  inline                        NestedTypesRec () { }
  inline                        NestedTypesRec (const Aida::AnyRec &ad) : NestedTypesRec() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::NestedTypesRec"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const NestedTypesRec &other) const;
  bool                          operator!=   (const NestedTypesRec &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<NestedTypesRec*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (rec, "rec");
    _visitor_ (seq, "seq");
  }
};
void operator<<= (Aida::ProtoMsg&, const NestedTypesRec&);
void operator>>= (Aida::ProtoReader&, NestedTypesRec&);

class NestedTypesSeq : public std::vector<NestedTypesRec>
{
public:
  typedef std::vector<NestedTypesRec> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      NestedTypesSeq (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        NestedTypesSeq () = default;
  inline                        NestedTypesSeq (const Aida::AnySeq &as) : NestedTypesSeq() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::NestedTypesSeq"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<NestedTypesSeq*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const NestedTypesSeq&);
void operator>>= (Aida::ProtoReader&, NestedTypesSeq&);

class NewRecord
{
public:
  /// @cond GeneratedFields
  int                           i;
  Enum1                         enum1;
  XFooSequence                  xfs;
  NestedTypesRec                ntr;
  /// @endcond
  inline                        NewRecord () { i = 0; enum1 = Enum1 (0); }
  inline                        NewRecord (const Aida::AnyRec &ad) : NewRecord() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::NewRecord"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const NewRecord &other) const;
  bool                          operator!=   (const NewRecord &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<NewRecord*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (i, "i");
    _visitor_ (enum1, "enum1");
    _visitor_ (xfs, "xfs");
    _visitor_ (ntr, "ntr");
  }
};
void operator<<= (Aida::ProtoMsg&, const NewRecord&);
void operator>>= (Aida::ProtoReader&, NewRecord&);

namespace Inner {

class InnerRecord
{
public:
  /// @cond GeneratedFields
  int                           x;
  int                           y;
  NewRecord                     rec;
  /// @endcond
  inline                        InnerRecord () { x = 0; y = 0; }
  inline                        InnerRecord (const Aida::AnyRec &ad) : InnerRecord() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::Inner::InnerRecord"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const InnerRecord &other) const;
  bool                          operator!=   (const InnerRecord &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<InnerRecord*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (x, "x");
    _visitor_ (y, "y");
    _visitor_ (rec, "rec");
  }
};
void operator<<= (Aida::ProtoMsg&, const InnerRecord&);
void operator>>= (Aida::ProtoReader&, InnerRecord&);
} // Inner

class Refer2Inner
{
public:
  /// @cond GeneratedFields
  Inner::InnerRecord            r;
  /// @endcond
  inline                        Refer2Inner () { }
  inline                        Refer2Inner (const Aida::AnyRec &ad) : Refer2Inner() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "MandatoryNamespace::Refer2Inner"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const Refer2Inner &other) const;
  bool                          operator!=   (const Refer2Inner &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<Refer2Inner*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (r, "r");
  }
};
void operator<<= (Aida::ProtoMsg&, const Refer2Inner&);
void operator>>= (Aida::ProtoReader&, Refer2Inner&);
} // MandatoryNamespace

namespace OtherNamespace {

class SomeRecord
{
public:
  /// @cond GeneratedFields
  MandatoryNamespace::NewRecord r1;
  MandatoryNamespace::NewRecord r2;
  MandatoryNamespace::Inner::InnerRecord r3;
  MandatoryNamespace::Inner::InnerRecord r4;
  /// @endcond
  inline                        SomeRecord () { }
  inline                        SomeRecord (const Aida::AnyRec &ad) : SomeRecord() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "OtherNamespace::SomeRecord"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const SomeRecord &other) const;
  bool                          operator!=   (const SomeRecord &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<SomeRecord*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (r1, "r1");
    _visitor_ (r2, "r2");
    _visitor_ (r3, "r3");
    _visitor_ (r4, "r4");
  }
};
void operator<<= (Aida::ProtoMsg&, const SomeRecord&);
void operator>>= (Aida::ProtoReader&, SomeRecord&);
} // OtherNamespace

namespace Auxdata {

class RecordWithAuxdata
{
public:
  /// @cond GeneratedFields
  bool                          aux_bool;
  int                           aux32;
  int64_t                       aux64;
  double                        auxf64;
  std::string                   aux_str;
  /// @endcond
  inline                        RecordWithAuxdata () { aux_bool = 0; aux32 = 0; aux64 = 0; auxf64 = 0; }
  inline                        RecordWithAuxdata (const Aida::AnyRec &ad) : RecordWithAuxdata() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "Auxdata::RecordWithAuxdata"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const RecordWithAuxdata &other) const;
  bool                          operator!=   (const RecordWithAuxdata &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<RecordWithAuxdata*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (aux_bool, "aux_bool");
    _visitor_ (aux32, "aux32");
    _visitor_ (aux64, "aux64");
    _visitor_ (auxf64, "auxf64");
    _visitor_ (aux_str, "aux_str");
  }
};
void operator<<= (Aida::ProtoMsg&, const RecordWithAuxdata&);
void operator>>= (Aida::ProtoReader&, RecordWithAuxdata&);
} // Auxdata

namespace InterfaceTests {

class UIWidgetAreaHandle : public virtual Aida::RemoteHandle
{
  friend                        class UIWidgetAreaIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~UIWidgetAreaHandle () override;
  /*copy*/                      UIWidgetAreaHandle (const UIWidgetAreaHandle&) = default;
  UIWidgetAreaHandle&           operator= (const UIWidgetAreaHandle&) = default;
  static UIWidgetAreaHandle     __cast__ (const RemoteHandle &smh);
  explicit                      UIWidgetAreaHandle ();
  bool                          dummy    () const;
  void                          dummy    (bool);
  std::string                   on_click () const;
  void                          on_click (const std::string&);
  double                        simple_method      ();
  double                        single_arg         (int n);
  double                        single_arg2        (int n = 5);
  double                        two_args           (int n,
                                                    double r);
  double                        two_args2          (int n = 6,
                                                    double r = 7.7);
  double                        multi_args         (bool b,
                                                    int64_t n,
                                                    double r,
                                                    int i,
                                                    const std::string &s = "String ding",
                                                    double y = 5);
  double                        self_method        (UIWidgetAreaHandle &ba1,
                                                    UIWidgetAreaHandle &ba2);
  void                          void_method        ();
  std::string                   on_click2out       ();
  void                          on_click2in        (const std::string &command);
  __aidacc_tests_t304_testpass_idl_ifx__ ( UIWidgetAreaIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    UIWidgetAreaHandle (const std::shared_ptr<UIWidgetAreaIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    __visitor_ (*this, "dummy", &UIWidgetAreaHandle::dummy, &UIWidgetAreaHandle::dummy);
    __visitor_ (*this, "on_click", &UIWidgetAreaHandle::on_click, &UIWidgetAreaHandle::on_click);
  }
};
typedef UIWidgetAreaHandle UIWidgetAreaH; ///< Convenience alias for the IDL type UIWidgetArea.
typedef ::Aida::ScopedHandle<UIWidgetAreaH> UIWidgetAreaS;

class ParentHandle : public virtual Aida::RemoteHandle
{
  friend                        class ParentIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~ParentHandle () override;
  /*copy*/                      ParentHandle (const ParentHandle&) = default;
  ParentHandle&                 operator= (const ParentHandle&) = default;
  static ParentHandle           __cast__ (const RemoteHandle &smh);
  explicit                      ParentHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( ParentIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    ParentHandle (const std::shared_ptr<ParentIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef ParentHandle ParentH; ///< Convenience alias for the IDL type Parent.
typedef ::Aida::ScopedHandle<ParentH> ParentS;

class ChildHandle : public virtual ParentHandle
{
  friend                        class ChildIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~ChildHandle () override;
  /*copy*/                      ChildHandle (const ChildHandle&) = default;
  ChildHandle&                  operator= (const ChildHandle&) = default;
  static ChildHandle            __cast__ (const RemoteHandle &smh);
  explicit                      ChildHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( ChildIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    ChildHandle (const std::shared_ptr<ChildIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->ParentHandle::__accept_accessor__ (__visitor_);
  }
};
typedef ChildHandle ChildH; ///< Convenience alias for the IDL type Child.
typedef ::Aida::ScopedHandle<ChildH> ChildS;

class DescendantHandle : public virtual ChildHandle
{
  friend                        class DescendantIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~DescendantHandle () override;
  /*copy*/                      DescendantHandle (const DescendantHandle&) = default;
  DescendantHandle&             operator= (const DescendantHandle&) = default;
  static DescendantHandle       __cast__ (const RemoteHandle &smh);
  explicit                      DescendantHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( DescendantIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    DescendantHandle (const std::shared_ptr<DescendantIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->ChildHandle::__accept_accessor__ (__visitor_);
  }
};
typedef DescendantHandle DescendantH; ///< Convenience alias for the IDL type Descendant.
typedef ::Aida::ScopedHandle<DescendantH> DescendantS;

class GrandChildHandle : public virtual DescendantHandle
{
  friend                        class GrandChildIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~GrandChildHandle () override;
  /*copy*/                      GrandChildHandle (const GrandChildHandle&) = default;
  GrandChildHandle&             operator= (const GrandChildHandle&) = default;
  static GrandChildHandle       __cast__ (const RemoteHandle &smh);
  explicit                      GrandChildHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( GrandChildIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    GrandChildHandle (const std::shared_ptr<GrandChildIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->DescendantHandle::__accept_accessor__ (__visitor_);
  }
};
typedef GrandChildHandle GrandChildH; ///< Convenience alias for the IDL type GrandChild.
typedef ::Aida::ScopedHandle<GrandChildH> GrandChildS;

class QuickRecord
{
public:
  /// @cond GeneratedFields
  int                           int1;
  int                           int2;
  /// @endcond
  inline                        QuickRecord () { int1 = 0; int2 = 0; }
  inline                        QuickRecord (const Aida::AnyRec &ad) : QuickRecord() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "InterfaceTests::QuickRecord"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const QuickRecord &other) const;
  bool                          operator!=   (const QuickRecord &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<QuickRecord*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (int1, "int1");
    _visitor_ (int2, "int2");
  }
};
void operator<<= (Aida::ProtoMsg&, const QuickRecord&);
void operator>>= (Aida::ProtoReader&, QuickRecord&);

class QuickSequence : public std::vector<double>
{
public:
  typedef std::vector<double> Sequence;
  reference append_back() ///< Append data at the end, returns write reference to data.
  { resize (size() + 1); return back(); }
  explicit                      QuickSequence (std::initializer_list<value_type> il) : Sequence (il) {};
  inline                        QuickSequence () = default;
  inline                        QuickSequence (const Aida::AnySeq &as) : QuickSequence() { __aida_from_any__ (Aida::Any (as)); }
  std::string                   __typename__      () const	{ return "InterfaceTests::QuickSequence"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_sequence (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_sequence (any, *this); }
  operator                      Aida::AnySeq      () const { return const_cast<QuickSequence*> (this)->__aida_to_any__().get<Aida::AnySeq>(); }
};
void operator<<= (Aida::ProtoMsg&, const QuickSequence&);
void operator>>= (Aida::ProtoReader&, QuickSequence&);

class QuickIfaceHandle : public virtual Aida::RemoteHandle
{
  friend                        class QuickIfaceIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~QuickIfaceHandle () override;
  /*copy*/                      QuickIfaceHandle (const QuickIfaceHandle&) = default;
  QuickIfaceHandle&             operator= (const QuickIfaceHandle&) = default;
  static QuickIfaceHandle       __cast__ (const RemoteHandle &smh);
  explicit                      QuickIfaceHandle ();
  void                          simple_function  (int i = 9);
  __aidacc_tests_t304_testpass_idl_ifx__ ( QuickIfaceIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    QuickIfaceHandle (const std::shared_ptr<QuickIfaceIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef QuickIfaceHandle QuickIfaceH; ///< Convenience alias for the IDL type QuickIface.
typedef ::Aida::ScopedHandle<QuickIfaceH> QuickIfaceS;

class MethodTestInterfaceHandle : public virtual Aida::RemoteHandle
{
  friend                        class MethodTestInterfaceIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~MethodTestInterfaceHandle () override;
  /*copy*/                      MethodTestInterfaceHandle (const MethodTestInterfaceHandle&) = default;
  MethodTestInterfaceHandle&    operator= (const MethodTestInterfaceHandle&) = default;
  static MethodTestInterfaceHandle __cast__ (const RemoteHandle &smh);
  explicit                      MethodTestInterfaceHandle ();
  void                          method_with_void          ();
  bool                          method_with_bools         (bool input,
                                                           bool optval = 0);
  int                           method_with_ints32        (int input,
                                                           int optval = -2);
  int64_t                       method_with_ints64        (int64_t input,
                                                           int64_t optval = 576460752303423488);
  double                        method_with_floats        (double input,
                                                           double optval = 309.9);
  std::string                   method_with_string        (const std::string &input,
                                                           const std::string &optval = "default");
  QuickEnum                     method_with_enum          (QuickEnum input,
                                                           QuickEnum optval = QuickEnum (0));
  QuickRecord                   method_with_record        (const QuickRecord &input,
                                                           const QuickRecord &optval = QuickRecord());
  QuickSequence                 method_with_sequence      (const QuickSequence &input,
                                                           const QuickSequence &optval = QuickSequence());
  GrandChildHandle              method_with_interface     (GrandChildHandle &input,
                                                           GrandChildHandle &optval);
  Aida::Any                     method_with_anys          (const Aida::Any &input,
                                                           const Aida::Any &optval);
  QuickIfaceHandle              method_with_quickiface    (QuickIfaceHandle &input,
                                                           QuickIfaceHandle &iface0);
  __aidacc_tests_t304_testpass_idl_ifx__ ( MethodTestInterfaceIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    MethodTestInterfaceHandle (const std::shared_ptr<MethodTestInterfaceIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef MethodTestInterfaceHandle MethodTestInterfaceH; ///< Convenience alias for the IDL type MethodTestInterface.
typedef ::Aida::ScopedHandle<MethodTestInterfaceH> MethodTestInterfaceS;

class SignalTestInterfaceHandle : public virtual Aida::RemoteHandle
{
  friend                        class SignalTestInterfaceIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~SignalTestInterfaceHandle () override;
  /*copy*/                      SignalTestInterfaceHandle (const SignalTestInterfaceHandle&) = default;
  SignalTestInterfaceHandle&    operator= (const SignalTestInterfaceHandle&) = default;
  static SignalTestInterfaceHandle __cast__ (const RemoteHandle &smh);
  explicit                      SignalTestInterfaceHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( SignalTestInterfaceIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    SignalTestInterfaceHandle (const std::shared_ptr<SignalTestInterfaceIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef SignalTestInterfaceHandle SignalTestInterfaceH; ///< Convenience alias for the IDL type SignalTestInterface.
typedef ::Aida::ScopedHandle<SignalTestInterfaceH> SignalTestInterfaceS;

class ChildInheritingSignalsHandle : public virtual SignalTestInterfaceHandle
{
  friend                        class ChildInheritingSignalsIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~ChildInheritingSignalsHandle () override;
  /*copy*/                      ChildInheritingSignalsHandle (const ChildInheritingSignalsHandle&) = default;
  ChildInheritingSignalsHandle& operator= (const ChildInheritingSignalsHandle&) = default;
  static ChildInheritingSignalsHandle __cast__ (const RemoteHandle &smh);
  explicit                      ChildInheritingSignalsHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( ChildInheritingSignalsIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    ChildInheritingSignalsHandle (const std::shared_ptr<ChildInheritingSignalsIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->SignalTestInterfaceHandle::__accept_accessor__ (__visitor_);
  }
};
typedef ChildInheritingSignalsHandle ChildInheritingSignalsH; ///< Convenience alias for the IDL type ChildInheritingSignals.
typedef ::Aida::ScopedHandle<ChildInheritingSignalsH> ChildInheritingSignalsS;

class AnotherChildHandle : public virtual SignalTestInterfaceHandle
{
  friend                        class AnotherChildIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~AnotherChildHandle () override;
  /*copy*/                      AnotherChildHandle (const AnotherChildHandle&) = default;
  AnotherChildHandle&           operator= (const AnotherChildHandle&) = default;
  static AnotherChildHandle     __cast__ (const RemoteHandle &smh);
  explicit                      AnotherChildHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( AnotherChildIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    AnotherChildHandle (const std::shared_ptr<AnotherChildIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->SignalTestInterfaceHandle::__accept_accessor__ (__visitor_);
  }
};
typedef AnotherChildHandle AnotherChildH; ///< Convenience alias for the IDL type AnotherChild.
typedef ::Aida::ScopedHandle<AnotherChildH> AnotherChildS;

class PropertyTesterHandle : public virtual Aida::RemoteHandle
{
  friend                        class PropertyTesterIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~PropertyTesterHandle () override;
  /*copy*/                      PropertyTesterHandle (const PropertyTesterHandle&) = default;
  PropertyTesterHandle&         operator= (const PropertyTesterHandle&) = default;
  static PropertyTesterHandle   __cast__ (const RemoteHandle &smh);
  explicit                      PropertyTesterHandle ();
  bool                          bool_prop      () const;
  void                          bool_prop      (bool);
  int                           int32_prop     () const;
  void                          int32_prop     (int);
  int64_t                       int64_prop     () const;
  void                          int64_prop     (int64_t);
  double                        float64_prop   () const;
  void                          float64_prop   (double);
  std::string                   string_prop    () const;
  void                          string_prop    (const std::string&);
  QuickEnum                     enum_prop      () const;
  void                          enum_prop      (QuickEnum);
  QuickRecord                   record_prop    () const;
  void                          record_prop    (const QuickRecord&);
  QuickSequence                 sequence_prop  () const;
  void                          sequence_prop  (const QuickSequence&);
  GrandChildHandle              interface_prop () const;
  void                          interface_prop (GrandChildHandle);
  PropertyTesterHandle          self_prop      () const;
  void                          self_prop      (PropertyTesterHandle);
  Aida::Any                     any_prop       () const;
  void                          any_prop       (const Aida::Any&);
  __aidacc_tests_t304_testpass_idl_ifx__ ( PropertyTesterIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    PropertyTesterHandle (const std::shared_ptr<PropertyTesterIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    __visitor_ (*this, "bool_prop", &PropertyTesterHandle::bool_prop, &PropertyTesterHandle::bool_prop);
    __visitor_ (*this, "int32_prop", &PropertyTesterHandle::int32_prop, &PropertyTesterHandle::int32_prop);
    __visitor_ (*this, "int64_prop", &PropertyTesterHandle::int64_prop, &PropertyTesterHandle::int64_prop);
    __visitor_ (*this, "float64_prop", &PropertyTesterHandle::float64_prop, &PropertyTesterHandle::float64_prop);
    __visitor_ (*this, "string_prop", &PropertyTesterHandle::string_prop, &PropertyTesterHandle::string_prop);
    __visitor_ (*this, "enum_prop", &PropertyTesterHandle::enum_prop, &PropertyTesterHandle::enum_prop);
    __visitor_ (*this, "record_prop", &PropertyTesterHandle::record_prop, &PropertyTesterHandle::record_prop);
    __visitor_ (*this, "sequence_prop", &PropertyTesterHandle::sequence_prop, &PropertyTesterHandle::sequence_prop);
    __visitor_ (*this, "interface_prop", &PropertyTesterHandle::interface_prop, &PropertyTesterHandle::interface_prop);
    __visitor_ (*this, "self_prop", &PropertyTesterHandle::self_prop, &PropertyTesterHandle::self_prop);
    __visitor_ (*this, "any_prop", &PropertyTesterHandle::any_prop, &PropertyTesterHandle::any_prop);
  }
};
typedef PropertyTesterHandle PropertyTesterH; ///< Convenience alias for the IDL type PropertyTester.
typedef ::Aida::ScopedHandle<PropertyTesterH> PropertyTesterS;
} // InterfaceTests

namespace RapicornAidaTest {

class UseIncludesHandle : public virtual IncludeCheck::SomeInterfaceHandle
{
  friend                        class UseIncludesIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~UseIncludesHandle () override;
  /*copy*/                      UseIncludesHandle (const UseIncludesHandle&) = default;
  UseIncludesHandle&            operator= (const UseIncludesHandle&) = default;
  static UseIncludesHandle      __cast__ (const RemoteHandle &smh);
  explicit                      UseIncludesHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( UseIncludesIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    UseIncludesHandle (const std::shared_ptr<UseIncludesIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    this->IncludeCheck::SomeInterfaceHandle::__accept_accessor__ (__visitor_);
  }
};
typedef UseIncludesHandle UseIncludesH; ///< Convenience alias for the IDL type UseIncludes.
typedef ::Aida::ScopedHandle<UseIncludesH> UseIncludesS;

class ButtonAreaHandle : public virtual Aida::RemoteHandle
{
  friend                        class ButtonAreaIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~ButtonAreaHandle () override;
  /*copy*/                      ButtonAreaHandle (const ButtonAreaHandle&) = default;
  ButtonAreaHandle&             operator= (const ButtonAreaHandle&) = default;
  static ButtonAreaHandle       __cast__ (const RemoteHandle &smh);
  explicit                      ButtonAreaHandle ();
  std::string                   on_click   () const;
  void                          on_click   (const std::string&);
  std::string                   on_click2  () const;
  void                          on_click2  (const std::string&);
  std::string                   on_click3  () const;
  void                          on_click3  (const std::string&);
  ClickType                     click_type () const;
  void                          click_type (ClickType);
  __aidacc_tests_t304_testpass_idl_ifx__ ( ButtonAreaIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    ButtonAreaHandle (const std::shared_ptr<ButtonAreaIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    __visitor_ (*this, "on_click", &ButtonAreaHandle::on_click, &ButtonAreaHandle::on_click);
    __visitor_ (*this, "on_click2", &ButtonAreaHandle::on_click2, &ButtonAreaHandle::on_click2);
    __visitor_ (*this, "on_click3", &ButtonAreaHandle::on_click3, &ButtonAreaHandle::on_click3);
    __visitor_ (*this, "click_type", &ButtonAreaHandle::click_type, &ButtonAreaHandle::click_type);
  }
};
typedef ButtonAreaHandle ButtonAreaH; ///< Convenience alias for the IDL type ButtonArea.
typedef ::Aida::ScopedHandle<ButtonAreaH> ButtonAreaS;

class PureMethodsHandle;

class PureMethodsHandle : public virtual Aida::RemoteHandle
{
  friend                        class PureMethodsIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~PureMethodsHandle () override;
  /*copy*/                      PureMethodsHandle (const PureMethodsHandle&) = default;
  PureMethodsHandle&            operator= (const PureMethodsHandle&) = default;
  static PureMethodsHandle      __cast__ (const RemoteHandle &smh);
  explicit                      PureMethodsHandle ();
  int                           pure_method       (double f);
  __aidacc_tests_t304_testpass_idl_ifx__ ( PureMethodsIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    PureMethodsHandle (const std::shared_ptr<PureMethodsIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef PureMethodsHandle PureMethodsH; ///< Convenience alias for the IDL type PureMethods.
typedef ::Aida::ScopedHandle<PureMethodsH> PureMethodsS;
} // RapicornAidaTest

namespace Other {

class NameTestsHandle : public virtual Aida::RemoteHandle
{
  friend                        class NameTestsIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~NameTestsHandle () override;
  /*copy*/                      NameTestsHandle (const NameTestsHandle&) = default;
  NameTestsHandle&              operator= (const NameTestsHandle&) = default;
  static NameTestsHandle        __cast__ (const RemoteHandle &smh);
  explicit                      NameTestsHandle ();
  void                          args_from_other_namespace (const InterfaceTests::QuickRecord &qr,
                                                           RapicornAidaTest::ClickType qe,
                                                           const OtherNamespace::SomeRecord &sr);
  __aidacc_tests_t304_testpass_idl_ifx__ ( NameTestsIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    NameTestsHandle (const std::shared_ptr<NameTestsIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef NameTestsHandle NameTestsH; ///< Convenience alias for the IDL type NameTests.
typedef ::Aida::ScopedHandle<NameTestsH> NameTestsS;
} // Other

namespace BseTest {

class CompressorHandle : public virtual Aida::RemoteHandle
{
  friend                        class CompressorIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~CompressorHandle () override;
  /*copy*/                      CompressorHandle (const CompressorHandle&) = default;
  CompressorHandle&             operator= (const CompressorHandle&) = default;
  static CompressorHandle       __cast__ (const RemoteHandle &smh);
  explicit                      CompressorHandle ();
  double                        threshold () const;
  void                          threshold (double);
  double                        ratio     () const;
  void                          ratio     (double);
  __aidacc_tests_t304_testpass_idl_ifx__ ( CompressorIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    CompressorHandle (const std::shared_ptr<CompressorIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {
    __visitor_ (*this, "threshold", &CompressorHandle::threshold, &CompressorHandle::threshold);
    __visitor_ (*this, "ratio", &CompressorHandle::ratio, &CompressorHandle::ratio);
  }
};
typedef CompressorHandle CompressorH; ///< Convenience alias for the IDL type Compressor.
typedef ::Aida::ScopedHandle<CompressorH> CompressorS;

class RecordForGroups
{
public:
  /// @cond GeneratedFields
  int                           i;
  double                        ratio;
  bool                          ordinary_bool;
  double                        threshold1;
  double                        threshold2;
  /// @endcond
  inline                        RecordForGroups () { i = 0; ratio = 0; ordinary_bool = 0; threshold1 = 0; threshold2 = 0; }
  inline                        RecordForGroups (const Aida::AnyRec &ad) : RecordForGroups() { __aida_from_any__ (Aida::Any (ad)); }
  std::string                   __typename__      () const	{ return "BseTest::RecordForGroups"; }
  const Aida::StringVector&     __aida_aux_data__ () const;
  Aida::Any                     __aida_to_any__   () { return Aida::any_from_visitable (*this); }
  void                          __aida_from_any__ (const Aida::Any &any) { return Aida::any_to_visitable (any, *this); }
  bool                          operator==   (const RecordForGroups &other) const;
  bool                          operator!=   (const RecordForGroups &other) const { return !operator== (other); }
  operator                      Aida::AnyRec () const { Aida::AnyRec r; const_cast<RecordForGroups*> (this)->__visit__ ([&r] (const auto &v, const char *n) { r[n] = v; }); return r; }
  template<class Visitor> void  __visit__    (Visitor &&_visitor_);
  template<class Visitor> void  __accept__  (Visitor &_visitor_)
  {
    _visitor_ (i, "i");
    _visitor_ (ratio, "ratio");
    _visitor_ (ordinary_bool, "ordinary_bool");
    _visitor_ (threshold1, "threshold1");
    _visitor_ (threshold2, "threshold2");
  }
};
void operator<<= (Aida::ProtoMsg&, const RecordForGroups&);
void operator>>= (Aida::ProtoReader&, RecordForGroups&);

class SoundModuleHandle : public virtual Aida::RemoteHandle
{
  friend                        class SoundModuleIface;
  static const Aida::TypeHash&  __aida_typeid__();
protected:
public:
  virtual /*dtor*/             ~SoundModuleHandle () override;
  /*copy*/                      SoundModuleHandle (const SoundModuleHandle&) = default;
  SoundModuleHandle&            operator= (const SoundModuleHandle&) = default;
  static SoundModuleHandle      __cast__ (const RemoteHandle &smh);
  explicit                      SoundModuleHandle ();
  __aidacc_tests_t304_testpass_idl_ifx__ ( SoundModuleIface*  __iface__ () const );
  __aidacc_tests_t304_testpass_idl_ifx__ ( /*conv*/    SoundModuleHandle (const std::shared_ptr<SoundModuleIface>&) );
  template<class Visitor> void  __accept_accessor__ (Visitor &__visitor_)
  {}
};
typedef SoundModuleHandle SoundModuleH; ///< Convenience alias for the IDL type SoundModule.
typedef ::Aida::ScopedHandle<SoundModuleH> SoundModuleS;
} // BseTest

namespace MandatoryNamespace {
template<class Visitor> void
XFooRecord::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (single_bool, "single_bool");
  std::forward<Visitor> (_visitor_) (single_num, "single_num");
  std::forward<Visitor> (_visitor_) (num64, "num64");
  std::forward<Visitor> (_visitor_) (single_float, "single_float");
  std::forward<Visitor> (_visitor_) (single_string, "single_string");
  std::forward<Visitor> (_visitor_) (sibling1, "sibling1");
  std::forward<Visitor> (_visitor_) (sibling2, "sibling2");
  std::forward<Visitor> (_visitor_) (multi1, "multi1");
  std::forward<Visitor> (_visitor_) (multi2, "multi2");
  std::forward<Visitor> (_visitor_) (multi3, "multi3");
  std::forward<Visitor> (_visitor_) (multi4, "multi4");
  std::forward<Visitor> (_visitor_) (enum_field, "enum_field");
  std::forward<Visitor> (_visitor_) (iface1, "iface1");
  std::forward<Visitor> (_visitor_) (iface2, "iface2");
  std::forward<Visitor> (_visitor_) (iface3, "iface3");
  std::forward<Visitor> (_visitor_) (any1, "any1");
  std::forward<Visitor> (_visitor_) (any2, "any2");
  std::forward<Visitor> (_visitor_) (any3, "any3");
}
template<class Visitor> void
NestedTypesRec::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (rec, "rec");
  std::forward<Visitor> (_visitor_) (seq, "seq");
}
template<class Visitor> void
NewRecord::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (i, "i");
  std::forward<Visitor> (_visitor_) (enum1, "enum1");
  std::forward<Visitor> (_visitor_) (xfs, "xfs");
  std::forward<Visitor> (_visitor_) (ntr, "ntr");
}

namespace Inner {
template<class Visitor> void
InnerRecord::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (x, "x");
  std::forward<Visitor> (_visitor_) (y, "y");
  std::forward<Visitor> (_visitor_) (rec, "rec");
}
} // Inner
template<class Visitor> void
Refer2Inner::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (r, "r");
}
} // MandatoryNamespace

namespace OtherNamespace {
template<class Visitor> void
SomeRecord::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (r1, "r1");
  std::forward<Visitor> (_visitor_) (r2, "r2");
  std::forward<Visitor> (_visitor_) (r3, "r3");
  std::forward<Visitor> (_visitor_) (r4, "r4");
}
} // OtherNamespace

namespace Auxdata {
template<class Visitor> void
RecordWithAuxdata::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (aux_bool, "aux_bool");
  std::forward<Visitor> (_visitor_) (aux32, "aux32");
  std::forward<Visitor> (_visitor_) (aux64, "aux64");
  std::forward<Visitor> (_visitor_) (auxf64, "auxf64");
  std::forward<Visitor> (_visitor_) (aux_str, "aux_str");
}
} // Auxdata

namespace InterfaceTests {
template<class Visitor> void
QuickRecord::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (int1, "int1");
  std::forward<Visitor> (_visitor_) (int2, "int2");
}
} // InterfaceTests

namespace BseTest {
template<class Visitor> void
RecordForGroups::__visit__ (Visitor &&_visitor_)
{
  std::forward<Visitor> (_visitor_) (i, "i");
  std::forward<Visitor> (_visitor_) (ratio, "ratio");
  std::forward<Visitor> (_visitor_) (ordinary_bool, "ordinary_bool");
  std::forward<Visitor> (_visitor_) (threshold1, "threshold1");
  std::forward<Visitor> (_visitor_) (threshold2, "threshold2");
}
} // BseTest

#endif /* __CLNT__aidacc_tests_t304_testpass_idl */
// --- Generated by AidaCxxStub ---
#include "t304-testpass_interfaces.hh"

#ifndef __AIDA_CXXSTUB_CLIENT_CC__
#define __AIDA_CXXSTUB_CLIENT_CC__

namespace { // Anon

namespace __AIDA_Local__ {
using namespace Aida;

// helper
static inline ProtoMsg*
new_emit_result (const ProtoMsg *fb, uint64 h, uint64 l, uint32 n)
{
  return ProtoMsg::renew_into_result (const_cast<ProtoMsg*> (fb), Aida::MSGID_EMIT_RESULT, h, l, n);
}

} } // Anon::__AIDA_Local__

#endif // __AIDA_CXXSTUB_CLIENT_CC__


// --- Implementations ---

namespace MandatoryNamespace {
FirstInterfaceHandle::FirstInterfaceHandle ()
{}
FirstInterfaceHandle::~FirstInterfaceHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
FirstInterfaceHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x22113f623903ac14ULL, 0x3fe8e50c1a9a78d2ULL);
  return type_hash;
}
FirstInterfaceHandle
FirstInterfaceHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<FirstInterfaceIface> (ifacep);
}
void
FirstInterfaceHandle::void_func ()
{
  return __AIDA_Local__::remote_callv (*this, &FirstInterfaceIface::void_func);
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_XFooRecord_ = {
  "MandatoryNamespace::XFooRecord\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=MandatoryNamespace::XFooRecord\0"
  "single_bool.type=BOOL\0"
  "single_num.type=INT32\0"
  "num64.type=INT64\0"
  "single_float.type=FLOAT64\0"
  "single_string.type=STRING\0"
  "sibling1.type=INT32\0"
  "sibling2.type=INT32\0"
  "multi1.type=INT32\0"
  "multi2.type=INT32\0"
  "multi3.type=INT32\0"
  "multi4.type=INT32\0"
  "enum_field.type=ENUM\0"
  "enum_field.typename=MandatoryNamespace::ExtensiveEnum\0"
  "iface1.type=INTERFACE\0"
  "iface1.typename=MandatoryNamespace::FirstInterface\0"
  "iface2.type=INTERFACE\0"
  "iface2.typename=MandatoryNamespace::FirstInterface\0"
  "iface3.type=INTERFACE\0"
  "iface3.typename=MandatoryNamespace::FirstInterface\0"
  "any1.type=ANY\0"
  "any2.type=ANY\0"
  "any3.type=ANY\0"
};
const Aida::StringVector&
XFooRecord::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::XFooRecord");
  return sv;
}
bool
XFooRecord::operator== (const XFooRecord &other) const
{
  if (this->single_bool != other.single_bool) return false;
  if (this->single_num != other.single_num) return false;
  if (this->num64 != other.num64) return false;
  if (this->single_float != other.single_float) return false;
  if (this->single_string != other.single_string) return false;
  if (this->sibling1 != other.sibling1) return false;
  if (this->sibling2 != other.sibling2) return false;
  if (this->multi1 != other.multi1) return false;
  if (this->multi2 != other.multi2) return false;
  if (this->multi3 != other.multi3) return false;
  if (this->multi4 != other.multi4) return false;
  if (this->enum_field != other.enum_field) return false;
  if (this->iface1 != other.iface1) return false;
  if (this->iface2 != other.iface2) return false;
  if (this->iface3 != other.iface3) return false;
  if (this->any1 != other.any1) return false;
  if (this->any2 != other.any2) return false;
  if (this->any3 != other.any3) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const XFooRecord &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (18);
  __p_ <<= self.single_bool;
  __p_ <<= self.single_num;
  __p_ <<= self.num64;
  __p_ <<= self.single_float;
  __p_ <<= self.single_string;
  __p_ <<= self.sibling1;
  __p_ <<= self.sibling2;
  __p_ <<= self.multi1;
  __p_ <<= self.multi2;
  __p_ <<= self.multi3;
  __p_ <<= self.multi4;
  __p_ <<= self.enum_field;
  __p_ <<= self.iface1;
  __p_ <<= self.iface2;
  __p_ <<= self.iface3;
  __p_ <<= self.any1;
  __p_ <<= self.any2;
  __p_ <<= self.any3;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, XFooRecord &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 18) return;
  fbr >>= self.single_bool;
  fbr >>= self.single_num;
  fbr >>= self.num64;
  fbr >>= self.single_float;
  fbr >>= self.single_string;
  fbr >>= self.sibling1;
  fbr >>= self.sibling2;
  fbr >>= self.multi1;
  fbr >>= self.multi2;
  fbr >>= self.multi3;
  fbr >>= self.multi4;
  fbr >>= self.enum_field;
  fbr >>= self.iface1;
  fbr >>= self.iface2;
  fbr >>= self.iface3;
  fbr >>= self.any1;
  fbr >>= self.any2;
  fbr >>= self.any3;
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_XFooSequence_ = {
  "MandatoryNamespace::XFooSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::XFooSequence\0"
  "single_bool.type=BOOL\0"
};
const Aida::StringVector&
XFooSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::XFooSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const XFooSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, XFooSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_IntSequence_ = {
  "MandatoryNamespace::IntSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::IntSequence\0"
  "numx.type=INT32\0"
};
const Aida::StringVector&
IntSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::IntSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const IntSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, IntSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_FloatSequence_ = {
  "MandatoryNamespace::FloatSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::FloatSequence\0"
  "fractalvalue.type=FLOAT64\0"
};
const Aida::StringVector&
FloatSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::FloatSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const FloatSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, FloatSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_StringSequence_ = {
  "MandatoryNamespace::StringSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::StringSequence\0"
  "blurb.type=STRING\0"
};
const Aida::StringVector&
StringSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::StringSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const StringSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, StringSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_ExtensiveEnumSequence_ = {
  "MandatoryNamespace::ExtensiveEnumSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::ExtensiveEnumSequence\0"
  "enum_elements.type=ENUM\0"
  "enum_elements.typename=MandatoryNamespace::ExtensiveEnum\0"
};
const Aida::StringVector&
ExtensiveEnumSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::ExtensiveEnumSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const ExtensiveEnumSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, ExtensiveEnumSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_RecordSequence_ = {
  "MandatoryNamespace::RecordSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::RecordSequence\0"
  "repeatedfield.type=RECORD\0"
  "repeatedfield.typename=MandatoryNamespace::XFooRecord\0"
};
const Aida::StringVector&
RecordSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::RecordSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const RecordSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, RecordSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_SequenceSequence_ = {
  "MandatoryNamespace::SequenceSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::SequenceSequence\0"
  "moreints.type=SEQUENCE\0"
  "moreints.typename=MandatoryNamespace::IntSequence\0"
};
const Aida::StringVector&
SequenceSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::SequenceSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const SequenceSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, SequenceSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_InterfaceSequence_ = {
  "MandatoryNamespace::InterfaceSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::InterfaceSequence\0"
  "iface1.type=INTERFACE\0"
  "iface1.typename=MandatoryNamespace::FirstInterface\0"
};
const Aida::StringVector&
InterfaceSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::InterfaceSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const InterfaceSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, InterfaceSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_AnySequence_ = {
  "MandatoryNamespace::AnySequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::AnySequence\0"
  "any_value.type=ANY\0"
};
const Aida::StringVector&
AnySequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::AnySequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const AnySequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, AnySequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_NestedTypesRec_ = {
  "MandatoryNamespace::NestedTypesRec\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=MandatoryNamespace::NestedTypesRec\0"
  "rec.type=RECORD\0"
  "rec.typename=MandatoryNamespace::XFooRecord\0"
  "seq.type=SEQUENCE\0"
  "seq.typename=MandatoryNamespace::XFooSequence\0"
};
const Aida::StringVector&
NestedTypesRec::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::NestedTypesRec");
  return sv;
}
bool
NestedTypesRec::operator== (const NestedTypesRec &other) const
{
  if (this->rec != other.rec) return false;
  if (this->seq != other.seq) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const NestedTypesRec &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (2);
  __p_ <<= self.rec;
  __p_ <<= self.seq;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, NestedTypesRec &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.rec;
  fbr >>= self.seq;
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_NestedTypesSeq_ = {
  "MandatoryNamespace::NestedTypesSeq\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=MandatoryNamespace::NestedTypesSeq\0"
  "ntr.type=RECORD\0"
  "ntr.typename=MandatoryNamespace::NestedTypesRec\0"
};
const Aida::StringVector&
NestedTypesSeq::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::NestedTypesSeq");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const NestedTypesSeq &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, NestedTypesSeq &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_NewRecord_ = {
  "MandatoryNamespace::NewRecord\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=MandatoryNamespace::NewRecord\0"
  "i.type=INT32\0"
  "enum1.type=ENUM\0"
  "enum1.typename=MandatoryNamespace::Enum1\0"
  "xfs.type=SEQUENCE\0"
  "xfs.typename=MandatoryNamespace::XFooSequence\0"
  "ntr.type=RECORD\0"
  "ntr.typename=MandatoryNamespace::NestedTypesRec\0"
};
const Aida::StringVector&
NewRecord::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::NewRecord");
  return sv;
}
bool
NewRecord::operator== (const NewRecord &other) const
{
  if (this->i != other.i) return false;
  if (this->enum1 != other.enum1) return false;
  if (this->xfs != other.xfs) return false;
  if (this->ntr != other.ntr) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const NewRecord &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (4);
  __p_ <<= self.i;
  __p_ <<= self.enum1;
  __p_ <<= self.xfs;
  __p_ <<= self.ntr;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, NewRecord &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.i;
  fbr >>= self.enum1;
  fbr >>= self.xfs;
  fbr >>= self.ntr;
}

namespace Inner {
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Inner_InnerRecord_ = {
  "MandatoryNamespace::Inner::InnerRecord\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=MandatoryNamespace::Inner::InnerRecord\0"
  "x.type=INT32\0"
  "y.type=INT32\0"
  "rec.type=RECORD\0"
  "rec.typename=MandatoryNamespace::NewRecord\0"
};
const Aida::StringVector&
InnerRecord::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::Inner::InnerRecord");
  return sv;
}
bool
InnerRecord::operator== (const InnerRecord &other) const
{
  if (this->x != other.x) return false;
  if (this->y != other.y) return false;
  if (this->rec != other.rec) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const InnerRecord &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (3);
  __p_ <<= self.x;
  __p_ <<= self.y;
  __p_ <<= self.rec;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, InnerRecord &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 3) return;
  fbr >>= self.x;
  fbr >>= self.y;
  fbr >>= self.rec;
}
} // Inner
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Refer2Inner_ = {
  "MandatoryNamespace::Refer2Inner\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=MandatoryNamespace::Refer2Inner\0"
  "r.type=RECORD\0"
  "r.typename=MandatoryNamespace::Inner::InnerRecord\0"
};
const Aida::StringVector&
Refer2Inner::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("MandatoryNamespace::Refer2Inner");
  return sv;
}
bool
Refer2Inner::operator== (const Refer2Inner &other) const
{
  if (this->r != other.r) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const Refer2Inner &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (1);
  __p_ <<= self.r;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, Refer2Inner &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 1) return;
  fbr >>= self.r;
}
} // MandatoryNamespace

namespace OtherNamespace {
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__OtherNamespace_SomeRecord_ = {
  "OtherNamespace::SomeRecord\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=OtherNamespace::SomeRecord\0"
  "r1.type=RECORD\0"
  "r1.typename=MandatoryNamespace::NewRecord\0"
  "r2.type=RECORD\0"
  "r2.typename=MandatoryNamespace::NewRecord\0"
  "r3.type=RECORD\0"
  "r3.typename=MandatoryNamespace::Inner::InnerRecord\0"
  "r4.type=RECORD\0"
  "r4.typename=MandatoryNamespace::Inner::InnerRecord\0"
};
const Aida::StringVector&
SomeRecord::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("OtherNamespace::SomeRecord");
  return sv;
}
bool
SomeRecord::operator== (const SomeRecord &other) const
{
  if (this->r1 != other.r1) return false;
  if (this->r2 != other.r2) return false;
  if (this->r3 != other.r3) return false;
  if (this->r4 != other.r4) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const SomeRecord &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (4);
  __p_ <<= self.r1;
  __p_ <<= self.r2;
  __p_ <<= self.r3;
  __p_ <<= self.r4;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, SomeRecord &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 4) return;
  fbr >>= self.r1;
  fbr >>= self.r2;
  fbr >>= self.r3;
  fbr >>= self.r4;
}
} // OtherNamespace

namespace Auxdata {
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__Auxdata_RecordWithAuxdata_ = {
  "Auxdata::RecordWithAuxdata\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=Auxdata::RecordWithAuxdata\0"
  "aux_bool.type=BOOL\0"
  "aux_bool.label=AuxBool\0"
  "aux_bool.blurb=A Boolean\0"
  "aux_bool.hints=rw\0"
  "aux_bool.default=0\0"
  "aux32.type=INT32\0"
  "aux32.label=Aux32\0"
  "aux32.blurb=The Bar number\0"
  "aux32.hints=rw\0"
  "aux32.default=10007.0\0"
  "aux64.type=INT64\0"
  "aux64.label=Aux64\0"
  "aux64.blurb=64bit auxillary number\0"
  "aux64.hints=rw\0"
  "aux64.default=1152921504606846976\0"
  "auxf64.type=FLOAT64\0"
  "auxf64.label=AuxF64\0"
  "auxf64.blurb=X coordinate\0"
  "auxf64.hints=ro\0"
  "auxf64.default=0.019\0"
  "aux_str.type=STRING\0"
  "aux_str.label=AuxStr\0"
  "aux_str.blurb=Specify text here\0"
  "aux_str.hints=rw\0"
  "aux_str.default=auxtest3\0"
};
const Aida::StringVector&
RecordWithAuxdata::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("Auxdata::RecordWithAuxdata");
  return sv;
}
bool
RecordWithAuxdata::operator== (const RecordWithAuxdata &other) const
{
  if (this->aux_bool != other.aux_bool) return false;
  if (this->aux32 != other.aux32) return false;
  if (this->aux64 != other.aux64) return false;
  if (this->auxf64 != other.auxf64) return false;
  if (this->aux_str != other.aux_str) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const RecordWithAuxdata &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (5);
  __p_ <<= self.aux_bool;
  __p_ <<= self.aux32;
  __p_ <<= self.aux64;
  __p_ <<= self.auxf64;
  __p_ <<= self.aux_str;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, RecordWithAuxdata &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 5) return;
  fbr >>= self.aux_bool;
  fbr >>= self.aux32;
  fbr >>= self.aux64;
  fbr >>= self.auxf64;
  fbr >>= self.aux_str;
}
} // Auxdata

namespace InterfaceTests {
UIWidgetAreaHandle::UIWidgetAreaHandle ()
{}
UIWidgetAreaHandle::~UIWidgetAreaHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
UIWidgetAreaHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x11db82aaba1ee248ULL, 0xd2359653ff87e972ULL);
  return type_hash;
}
UIWidgetAreaHandle
UIWidgetAreaHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<UIWidgetAreaIface> (ifacep);
}
bool
UIWidgetAreaHandle::dummy () const
{
  return __AIDA_Local__::remote_callc (*this, &UIWidgetAreaIface::dummy);
}
void
UIWidgetAreaHandle::dummy (bool value)
{
  return __AIDA_Local__::remote_callv (*this, &UIWidgetAreaIface::dummy, value);
}
std::string
UIWidgetAreaHandle::on_click () const
{
  return __AIDA_Local__::remote_callc (*this, &UIWidgetAreaIface::on_click);
}
void
UIWidgetAreaHandle::on_click (const std::string &value)
{
  return __AIDA_Local__::remote_callv (*this, &UIWidgetAreaIface::on_click, value);
}
double
UIWidgetAreaHandle::simple_method ()
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::simple_method);
}
double
UIWidgetAreaHandle::single_arg (int arg_n)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::single_arg, arg_n);
}
double
UIWidgetAreaHandle::single_arg2 (int arg_n)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::single_arg2, arg_n);
}
double
UIWidgetAreaHandle::two_args (int arg_n,
                              double arg_r)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::two_args, arg_n, arg_r);
}
double
UIWidgetAreaHandle::two_args2 (int arg_n,
                               double arg_r)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::two_args2, arg_n, arg_r);
}
double
UIWidgetAreaHandle::multi_args (bool arg_b,
                                int64_t arg_n,
                                double arg_r,
                                int arg_i,
                                const std::string &arg_s,
                                double arg_y)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::multi_args, arg_b, arg_n, arg_r, arg_i, arg_s, arg_y);
}
double
UIWidgetAreaHandle::self_method (UIWidgetAreaHandle &arg_ba1,
                                 UIWidgetAreaHandle &arg_ba2)
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::self_method, *arg_ba1.__iface__(), *arg_ba2.__iface__());
}
void
UIWidgetAreaHandle::void_method ()
{
  return __AIDA_Local__::remote_callv (*this, &UIWidgetAreaIface::void_method);
}
std::string
UIWidgetAreaHandle::on_click2out ()
{
  return __AIDA_Local__::remote_callr (*this, &UIWidgetAreaIface::on_click2out);
}
void
UIWidgetAreaHandle::on_click2in (const std::string &arg_command)
{
  return __AIDA_Local__::remote_callv (*this, &UIWidgetAreaIface::on_click2in, arg_command);
}
ParentHandle::ParentHandle ()
{}
ParentHandle::~ParentHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
ParentHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xf3967d3ac61708d2ULL, 0x4043a82003ee6f1eULL);
  return type_hash;
}
ParentHandle
ParentHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<ParentIface> (ifacep);
}
ChildHandle::ChildHandle ()
{}
ChildHandle::~ChildHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
ChildHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xacf30fad3093ffcdULL, 0x4d8c65c035fba090ULL);
  return type_hash;
}
ChildHandle
ChildHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<ChildIface> (ifacep);
}
DescendantHandle::DescendantHandle ()
{}
DescendantHandle::~DescendantHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
DescendantHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x846a6876889dd896ULL, 0xbe521465806f3d42ULL);
  return type_hash;
}
DescendantHandle
DescendantHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<DescendantIface> (ifacep);
}
GrandChildHandle::GrandChildHandle ()
{}
GrandChildHandle::~GrandChildHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
GrandChildHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xf6975e5e92250718ULL, 0x53730d44919c46f9ULL);
  return type_hash;
}
GrandChildHandle
GrandChildHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<GrandChildIface> (ifacep);
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__InterfaceTests_QuickRecord_ = {
  "InterfaceTests::QuickRecord\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=InterfaceTests::QuickRecord\0"
  "int1.type=INT32\0"
  "int2.type=INT32\0"
};
const Aida::StringVector&
QuickRecord::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("InterfaceTests::QuickRecord");
  return sv;
}
bool
QuickRecord::operator== (const QuickRecord &other) const
{
  if (this->int1 != other.int1) return false;
  if (this->int2 != other.int2) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const QuickRecord &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (2);
  __p_ <<= self.int1;
  __p_ <<= self.int2;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, QuickRecord &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 2) return;
  fbr >>= self.int1;
  fbr >>= self.int2;
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__InterfaceTests_QuickSequence_ = {
  "InterfaceTests::QuickSequence\0"
  "SEQUENCE\0"
  "type=SEQUENCE\0"
  "typename=InterfaceTests::QuickSequence\0"
  "somefloat.type=FLOAT64\0"
};
const Aida::StringVector&
QuickSequence::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("InterfaceTests::QuickSequence");
  return sv;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const QuickSequence &self)
{
  const size_t len = self.size();
  Aida::ProtoMsg &__p_ = dst.add_seq (len);
  for (size_t k = 0; k < len; k++) {
    __p_ <<= self[k];
  }
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, QuickSequence &self)
{
  Aida::ProtoReader fbr (src.pop_seq());
  const size_t len = fbr.remaining();
  self.resize (len);
  for (size_t k = 0; k < len; k++) {
    fbr >>= self[k];
  }
}
QuickIfaceHandle::QuickIfaceHandle ()
{}
QuickIfaceHandle::~QuickIfaceHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
QuickIfaceHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x4524ee119d4e454cULL, 0xbeb61f7c3cc04f7dULL);
  return type_hash;
}
QuickIfaceHandle
QuickIfaceHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<QuickIfaceIface> (ifacep);
}
void
QuickIfaceHandle::simple_function (int arg_i)
{
  return __AIDA_Local__::remote_callv (*this, &QuickIfaceIface::simple_function, arg_i);
}
MethodTestInterfaceHandle::MethodTestInterfaceHandle ()
{}
MethodTestInterfaceHandle::~MethodTestInterfaceHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
MethodTestInterfaceHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x6bf684458ac5f01aULL, 0xf64c02611b807180ULL);
  return type_hash;
}
MethodTestInterfaceHandle
MethodTestInterfaceHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<MethodTestInterfaceIface> (ifacep);
}
void
MethodTestInterfaceHandle::method_with_void ()
{
  return __AIDA_Local__::remote_callv (*this, &MethodTestInterfaceIface::method_with_void);
}
bool
MethodTestInterfaceHandle::method_with_bools (bool arg_input,
                                              bool arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_bools, arg_input, arg_optval);
}
int
MethodTestInterfaceHandle::method_with_ints32 (int arg_input,
                                               int arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_ints32, arg_input, arg_optval);
}
int64_t
MethodTestInterfaceHandle::method_with_ints64 (int64_t arg_input,
                                               int64_t arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_ints64, arg_input, arg_optval);
}
double
MethodTestInterfaceHandle::method_with_floats (double arg_input,
                                               double arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_floats, arg_input, arg_optval);
}
std::string
MethodTestInterfaceHandle::method_with_string (const std::string &arg_input,
                                               const std::string &arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_string, arg_input, arg_optval);
}
QuickEnum
MethodTestInterfaceHandle::method_with_enum (QuickEnum arg_input,
                                             QuickEnum arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_enum, arg_input, arg_optval);
}
QuickRecord
MethodTestInterfaceHandle::method_with_record (const QuickRecord &arg_input,
                                               const QuickRecord &arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_record, arg_input, arg_optval);
}
QuickSequence
MethodTestInterfaceHandle::method_with_sequence (const QuickSequence &arg_input,
                                                 const QuickSequence &arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_sequence, arg_input, arg_optval);
}
GrandChildHandle
MethodTestInterfaceHandle::method_with_interface (GrandChildHandle &arg_input,
                                                  GrandChildHandle &arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_interface, *arg_input.__iface__(), *arg_optval.__iface__());
}
Aida::Any
MethodTestInterfaceHandle::method_with_anys (const Aida::Any &arg_input,
                                             const Aida::Any &arg_optval)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_anys, arg_input, arg_optval);
}
QuickIfaceHandle
MethodTestInterfaceHandle::method_with_quickiface (QuickIfaceHandle &arg_input,
                                                   QuickIfaceHandle &arg_iface0)
{
  return __AIDA_Local__::remote_callr (*this, &MethodTestInterfaceIface::method_with_quickiface, *arg_input.__iface__(), *arg_iface0.__iface__());
}
SignalTestInterfaceHandle::SignalTestInterfaceHandle ()
{}
SignalTestInterfaceHandle::~SignalTestInterfaceHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
SignalTestInterfaceHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x2873064ee22c0249ULL, 0xd8fae6f300b8e408ULL);
  return type_hash;
}
SignalTestInterfaceHandle
SignalTestInterfaceHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<SignalTestInterfaceIface> (ifacep);
}
ChildInheritingSignalsHandle::ChildInheritingSignalsHandle ()
{}
ChildInheritingSignalsHandle::~ChildInheritingSignalsHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
ChildInheritingSignalsHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xf20ff30241b5b694ULL, 0x9f544b2626e183f0ULL);
  return type_hash;
}
ChildInheritingSignalsHandle
ChildInheritingSignalsHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<ChildInheritingSignalsIface> (ifacep);
}
AnotherChildHandle::AnotherChildHandle ()
{}
AnotherChildHandle::~AnotherChildHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
AnotherChildHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x9a33af1b27f7e36dULL, 0xdf625f7bd18934faULL);
  return type_hash;
}
AnotherChildHandle
AnotherChildHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<AnotherChildIface> (ifacep);
}
PropertyTesterHandle::PropertyTesterHandle ()
{}
PropertyTesterHandle::~PropertyTesterHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
PropertyTesterHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xa37ab462c55a3b3cULL, 0x4f3fd1c9ad9689fbULL);
  return type_hash;
}
PropertyTesterHandle
PropertyTesterHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<PropertyTesterIface> (ifacep);
}
bool
PropertyTesterHandle::bool_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::bool_prop);
}
void
PropertyTesterHandle::bool_prop (bool value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::bool_prop, value);
}
int
PropertyTesterHandle::int32_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::int32_prop);
}
void
PropertyTesterHandle::int32_prop (int value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::int32_prop, value);
}
int64_t
PropertyTesterHandle::int64_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::int64_prop);
}
void
PropertyTesterHandle::int64_prop (int64_t value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::int64_prop, value);
}
double
PropertyTesterHandle::float64_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::float64_prop);
}
void
PropertyTesterHandle::float64_prop (double value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::float64_prop, value);
}
std::string
PropertyTesterHandle::string_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::string_prop);
}
void
PropertyTesterHandle::string_prop (const std::string &value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::string_prop, value);
}
QuickEnum
PropertyTesterHandle::enum_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::enum_prop);
}
void
PropertyTesterHandle::enum_prop (QuickEnum value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::enum_prop, value);
}
QuickRecord
PropertyTesterHandle::record_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::record_prop);
}
void
PropertyTesterHandle::record_prop (const QuickRecord &value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::record_prop, value);
}
QuickSequence
PropertyTesterHandle::sequence_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::sequence_prop);
}
void
PropertyTesterHandle::sequence_prop (const QuickSequence &value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::sequence_prop, value);
}
GrandChildHandle
PropertyTesterHandle::interface_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::interface_prop);
}
void
PropertyTesterHandle::interface_prop (GrandChildHandle value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::interface_prop, value.__iface__());
}
PropertyTesterHandle
PropertyTesterHandle::self_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::self_prop);
}
void
PropertyTesterHandle::self_prop (PropertyTesterHandle value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::self_prop, value.__iface__());
}
Aida::Any
PropertyTesterHandle::any_prop () const
{
  return __AIDA_Local__::remote_callc (*this, &PropertyTesterIface::any_prop);
}
void
PropertyTesterHandle::any_prop (const Aida::Any &value)
{
  return __AIDA_Local__::remote_callv (*this, &PropertyTesterIface::any_prop, value);
}
} // InterfaceTests

namespace RapicornAidaTest {
UseIncludesHandle::UseIncludesHandle ()
{}
UseIncludesHandle::~UseIncludesHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
UseIncludesHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xfbdf1e0d7f39f4f0ULL, 0x78270f907e3216b4ULL);
  return type_hash;
}
UseIncludesHandle
UseIncludesHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<UseIncludesIface> (ifacep);
}
ButtonAreaHandle::ButtonAreaHandle ()
{}
ButtonAreaHandle::~ButtonAreaHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
ButtonAreaHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xec371b296fa57436ULL, 0x92e4310e386fc92eULL);
  return type_hash;
}
ButtonAreaHandle
ButtonAreaHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<ButtonAreaIface> (ifacep);
}
std::string
ButtonAreaHandle::on_click () const
{
  return __AIDA_Local__::remote_callc (*this, &ButtonAreaIface::on_click);
}
void
ButtonAreaHandle::on_click (const std::string &value)
{
  return __AIDA_Local__::remote_callv (*this, &ButtonAreaIface::on_click, value);
}
std::string
ButtonAreaHandle::on_click2 () const
{
  return __AIDA_Local__::remote_callc (*this, &ButtonAreaIface::on_click2);
}
void
ButtonAreaHandle::on_click2 (const std::string &value)
{
  return __AIDA_Local__::remote_callv (*this, &ButtonAreaIface::on_click2, value);
}
std::string
ButtonAreaHandle::on_click3 () const
{
  return __AIDA_Local__::remote_callc (*this, &ButtonAreaIface::on_click3);
}
void
ButtonAreaHandle::on_click3 (const std::string &value)
{
  return __AIDA_Local__::remote_callv (*this, &ButtonAreaIface::on_click3, value);
}
ClickType
ButtonAreaHandle::click_type () const
{
  return __AIDA_Local__::remote_callc (*this, &ButtonAreaIface::click_type);
}
void
ButtonAreaHandle::click_type (ClickType value)
{
  return __AIDA_Local__::remote_callv (*this, &ButtonAreaIface::click_type, value);
}
PureMethodsHandle::PureMethodsHandle ()
{}
PureMethodsHandle::~PureMethodsHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
PureMethodsHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0xddc2a514d04d3af5ULL, 0xc0046740434c0486ULL);
  return type_hash;
}
PureMethodsHandle
PureMethodsHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<PureMethodsIface> (ifacep);
}
int
PureMethodsHandle::pure_method (double arg_f)
{
  return __AIDA_Local__::remote_callr (*this, &PureMethodsIface::pure_method, arg_f);
}
} // RapicornAidaTest

namespace Other {
NameTestsHandle::NameTestsHandle ()
{}
NameTestsHandle::~NameTestsHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
NameTestsHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x542d40cd7d8fcd40ULL, 0x8c1782df29c9b936ULL);
  return type_hash;
}
NameTestsHandle
NameTestsHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<NameTestsIface> (ifacep);
}
void
NameTestsHandle::args_from_other_namespace (const InterfaceTests::QuickRecord &arg_qr,
                                            RapicornAidaTest::ClickType arg_qe,
                                            const OtherNamespace::SomeRecord &arg_sr)
{
  return __AIDA_Local__::remote_callv (*this, &NameTestsIface::args_from_other_namespace, arg_qr, arg_qe, arg_sr);
}
} // Other

namespace BseTest {
CompressorHandle::CompressorHandle ()
{}
CompressorHandle::~CompressorHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
CompressorHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x42057a05d51182dfULL, 0x6a0d69cda274433eULL);
  return type_hash;
}
CompressorHandle
CompressorHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<CompressorIface> (ifacep);
}
double
CompressorHandle::threshold () const
{
  return __AIDA_Local__::remote_callc (*this, &CompressorIface::threshold);
}
void
CompressorHandle::threshold (double value)
{
  return __AIDA_Local__::remote_callv (*this, &CompressorIface::threshold, value);
}
double
CompressorHandle::ratio () const
{
  return __AIDA_Local__::remote_callc (*this, &CompressorIface::ratio);
}
void
CompressorHandle::ratio (double value)
{
  return __AIDA_Local__::remote_callv (*this, &CompressorIface::ratio, value);
}
static const Aida::IntrospectionRegistry __aida_aux_data_clnt__BseTest_RecordForGroups_ = {
  "BseTest::RecordForGroups\0"
  "RECORD\0"
  "type=RECORD\0"
  "typename=BseTest::RecordForGroups\0"
  "i.type=INT32\0"
  "ratio.type=FLOAT64\0"
  "ratio.hints=w\0"
  "ratio.default=0\0"
  "ratio.group=Normal\0"
  "ordinary_bool.type=BOOL\0"
  "threshold1.type=FLOAT64\0"
  "threshold2.type=FLOAT64\0"
};
const Aida::StringVector&
RecordForGroups::__aida_aux_data__() const
{
  static const Aida::StringVector sv = Aida::IntrospectionRegistry::lookup ("BseTest::RecordForGroups");
  return sv;
}
bool
RecordForGroups::operator== (const RecordForGroups &other) const
{
  if (this->i != other.i) return false;
  if (this->ratio != other.ratio) return false;
  if (this->ordinary_bool != other.ordinary_bool) return false;
  if (this->threshold1 != other.threshold1) return false;
  if (this->threshold2 != other.threshold2) return false;
  return true;
}
inline void __attribute__ ((used))
operator<<= (Aida::ProtoMsg &dst, const RecordForGroups &self)
{
  Aida::ProtoMsg &__p_ = dst.add_rec (5);
  __p_ <<= self.i;
  __p_ <<= self.ratio;
  __p_ <<= self.ordinary_bool;
  __p_ <<= self.threshold1;
  __p_ <<= self.threshold2;
}
inline void __attribute__ ((used))
operator>>= (Aida::ProtoReader &src, RecordForGroups &self)
{
  Aida::ProtoReader fbr (src.pop_rec());
  if (fbr.remaining() < 5) return;
  fbr >>= self.i;
  fbr >>= self.ratio;
  fbr >>= self.ordinary_bool;
  fbr >>= self.threshold1;
  fbr >>= self.threshold2;
}
SoundModuleHandle::SoundModuleHandle ()
{}
SoundModuleHandle::~SoundModuleHandle ()
{} // define empty dtor to emit vtable
const Aida::TypeHash&
SoundModuleHandle::__aida_typeid__()
{
  static const Aida::TypeHash type_hash = Aida::TypeHash (0x06447b38b51e0198ULL, 0x848669199cc311deULL);
  return type_hash;
}
SoundModuleHandle
SoundModuleHandle::__cast__ (const Aida::RemoteHandle &other)
{
  Aida::ImplicitBaseP &ifacep = const_cast<Aida::RemoteHandle&> (other).__iface_ptr__();
  return std::dynamic_pointer_cast<SoundModuleIface> (ifacep);
}
} // BseTest

#if     __ENUMCC__aidacc_tests_t304_testpass_idl__ == 1

namespace Aida {

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum1_ = {
  "MandatoryNamespace::Enum1\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum1\0"
  "E1_A.value=1\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum1> ()
{
  static const EnumValue _aida_enumvalues_1001[] = {
    { int64_t (MandatoryNamespace::Enum1::E1_A), "E1_A", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum1", 0, _aida_enumvalues_1001);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum1c_ = {
  "MandatoryNamespace::Enum1c\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum1c\0"
  "E1C_A.value=1\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum1c> ()
{
  static const EnumValue _aida_enumvalues_1002[] = {
    { int64_t (MandatoryNamespace::Enum1c::E1C_A), "E1C_A", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum1c", 0, _aida_enumvalues_1002);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum2_ = {
  "MandatoryNamespace::Enum2\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum2\0"
  "E2_A.value=1\0"
  "E2_B.value=2\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum2> ()
{
  static const EnumValue _aida_enumvalues_1003[] = {
    { int64_t (MandatoryNamespace::Enum2::E2_A), "E2_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum2::E2_B), "E2_B", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum2", 0, _aida_enumvalues_1003);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum2c_ = {
  "MandatoryNamespace::Enum2c\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum2c\0"
  "E2C_A.value=1\0"
  "E2C_B.value=2\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum2c> ()
{
  static const EnumValue _aida_enumvalues_1004[] = {
    { int64_t (MandatoryNamespace::Enum2c::E2C_A), "E2C_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum2c::E2C_B), "E2C_B", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum2c", 0, _aida_enumvalues_1004);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum3_ = {
  "MandatoryNamespace::Enum3\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum3\0"
  "E3_A.value=1\0"
  "E3_B.value=2\0"
  "E3_C.value=3\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum3> ()
{
  static const EnumValue _aida_enumvalues_1005[] = {
    { int64_t (MandatoryNamespace::Enum3::E3_A), "E3_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum3::E3_B), "E3_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum3::E3_C), "E3_C", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum3", 0, _aida_enumvalues_1005);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum3c_ = {
  "MandatoryNamespace::Enum3c\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum3c\0"
  "E3C_A.value=1\0"
  "E3C_B.value=2\0"
  "E3C_C.value=3\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum3c> ()
{
  static const EnumValue _aida_enumvalues_1006[] = {
    { int64_t (MandatoryNamespace::Enum3c::E3C_A), "E3C_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum3c::E3C_B), "E3C_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum3c::E3C_C), "E3C_C", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum3c", 0, _aida_enumvalues_1006);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum4a_ = {
  "MandatoryNamespace::Enum4a\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum4a\0"
  "E4A_A.value=1\0"
  "E4A_B.value=2\0"
  "E4A_C.value=3\0"
  "E4A_D.value=4\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum4a> ()
{
  static const EnumValue _aida_enumvalues_1007[] = {
    { int64_t (MandatoryNamespace::Enum4a::E4A_A), "E4A_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4a::E4A_B), "E4A_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4a::E4A_C), "E4A_C", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4a::E4A_D), "E4A_D", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum4a", 0, _aida_enumvalues_1007);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum4b_ = {
  "MandatoryNamespace::Enum4b\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum4b\0"
  "E4B_A.value=1\0"
  "E4B_B.value=2\0"
  "E4B_C.value=3\0"
  "E4B_D.value=4\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum4b> ()
{
  static const EnumValue _aida_enumvalues_1008[] = {
    { int64_t (MandatoryNamespace::Enum4b::E4B_A), "E4B_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4b::E4B_B), "E4B_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4b::E4B_C), "E4B_C", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4b::E4B_D), "E4B_D", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum4b", 0, _aida_enumvalues_1008);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum4c_ = {
  "MandatoryNamespace::Enum4c\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum4c\0"
  "E4C_A.value=1\0"
  "E4C_B.value=2\0"
  "E4C_C.value=3\0"
  "E4C_D.value=4\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum4c> ()
{
  static const EnumValue _aida_enumvalues_1009[] = {
    { int64_t (MandatoryNamespace::Enum4c::E4C_A), "E4C_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4c::E4C_B), "E4C_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4c::E4C_C), "E4C_C", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4c::E4C_D), "E4C_D", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum4c", 0, _aida_enumvalues_1009);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_Enum4d_ = {
  "MandatoryNamespace::Enum4d\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::Enum4d\0"
  "E4D_A.value=1\0"
  "E4D_B.value=2\0"
  "E4D_C.value=3\0"
  "E4D_D.value=4\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::Enum4d> ()
{
  static const EnumValue _aida_enumvalues_1010[] = {
    { int64_t (MandatoryNamespace::Enum4d::E4D_A), "E4D_A", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4d::E4D_B), "E4D_B", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4d::E4D_C), "E4D_C", NULL, NULL },
    { int64_t (MandatoryNamespace::Enum4d::E4D_D), "E4D_D", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::Enum4d", 0, _aida_enumvalues_1010);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__MandatoryNamespace_ExtensiveEnum_ = {
  "MandatoryNamespace::ExtensiveEnum\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=MandatoryNamespace::ExtensiveEnum\0"
  "V1a.value=1\0"
  "V1b.value=1\0"
  "V2.value=2\0"
  "V3.value=3\0"
  "V3.label=" "v3" "\0"
  "V4.value=4\0"
  "V4.label=" _("v4") "\0"
  "V5.value=5\0"
  "V5.label=" "v5" "\0"
  "V5.blurb=" "V5" "\0"
  "V6.value=6\0"
  "V6.label=" _("v6") "\0"
  "V6.blurb=" "V6" "\0"
  "V7.value=7\0"
  "V7.label=" "v7" "\0"
  "V7.blurb=" _("V7") "\0"
  "V8.value=8\0"
  "V8.label=" _("v8") "\0"
  "V8.blurb=" _("V8") "\0"
  "V9.value=9\0"
  "V10.value=10\0"
  "V10.label=" "v10" "\0"
  "V11.value=11\0"
  "V11.label=" _("v11") "\0"
  "V12.value=12\0"
  "V12.label=" "v12" "\0"
  "V13.value=13\0"
  "V14.value=14\0"
  "V14.label=" _("v14") "\0"
  "V15.value=15\0"
  "V15.label=" "v15" "\0"
  "V15.blurb=" "V15" "\0"
  "V16.value=16\0"
  "V16.label=" _("v16") "\0"
  "V16.blurb=" "V16" "\0"
  "V17.value=17\0"
  "V17.label=" "v17" "\0"
  "V17.blurb=" _("V17") "\0"
  "V18.value=18\0"
  "V18.label=" _("v18") "\0"
  "V18.blurb=" _("V18") "\0"
  "V20.value=20\0"
  "V21.value=21\0"
  "V22.value=22\0"
  "V23.value=23\0"
  "V24.value=24\0"
  "V25.value=-9223372036854775808\0"
  "V26.value=9223372036854775807\0"
  "V27.value=9223372036854775807\0"
  "V28.value=-28\0"
  "V30.value=42\0"
  "V31.value=43\0"
  "V31.label=" "foo" "\0"
  "V32.value=42\0"
  "V33.value=43\0"
  "V33.label=" "foo" "\0"
  "V34.value=44\0"
  "V34.label=" "foo" "\0"
  "V34.blurb=" "foo" "\0"
  "V35.value=42\0"
  "V35.label=" "foo" "\0"
  "V36.value=42\0"
  "V36.label=" "foo" "\0"
  "V36.blurb=" "foo4" "\0"
};
template<> const EnumInfo&
enum_info<MandatoryNamespace::ExtensiveEnum> ()
{
  static const EnumValue _aida_enumvalues_1011[] = {
    { int64_t (MandatoryNamespace::ExtensiveEnum::V1a), "V1a", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V1b), "V1b", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V2), "V2", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V3), "V3", "v3", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V4), "V4", _("v4"), NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V5), "V5", "v5", "V5" },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V6), "V6", _("v6"), "V6" },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V7), "V7", "v7", _("V7") },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V8), "V8", _("v8"), _("V8") },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V9), "V9", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V10), "V10", "v10", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V11), "V11", _("v11"), NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V12), "V12", "v12", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V13), "V13", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V14), "V14", _("v14"), NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V15), "V15", "v15", "V15" },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V16), "V16", _("v16"), "V16" },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V17), "V17", "v17", _("V17") },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V18), "V18", _("v18"), _("V18") },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V20), "V20", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V21), "V21", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V22), "V22", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V23), "V23", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V24), "V24", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V25), "V25", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V26), "V26", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V27), "V27", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V28), "V28", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V30), "V30", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V31), "V31", "foo", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V32), "V32", NULL, NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V33), "V33", "foo", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V34), "V34", "foo", "foo" },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V35), "V35", "foo", NULL },
    { int64_t (MandatoryNamespace::ExtensiveEnum::V36), "V36", "foo", "foo4" },
  };
  return ::Aida::EnumInfo::cached_enum_info ("MandatoryNamespace::ExtensiveEnum", 0, _aida_enumvalues_1011);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__InterfaceTests_QuickEnum_ = {
  "InterfaceTests::QuickEnum\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=InterfaceTests::QuickEnum\0"
  "ZERO.value=0\0"
};
template<> const EnumInfo&
enum_info<InterfaceTests::QuickEnum> ()
{
  static const EnumValue _aida_enumvalues_1012[] = {
    { int64_t (InterfaceTests::QuickEnum::ZERO), "ZERO", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("InterfaceTests::QuickEnum", 0, _aida_enumvalues_1012);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__RapicornAidaTest_ClickType_ = {
  "RapicornAidaTest::ClickType\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=RapicornAidaTest::ClickType\0"
  "CLICK_ON_PRESS.value=1\0"
  "CLICK_ON_RELEASE.value=2\0"
  "CLICK_SLOW_REPEAT.value=3\0"
  "CLICK_FAST_REPEAT.value=4\0"
  "CLICK_KEY_REPEAT.value=5\0"
};
template<> const EnumInfo&
enum_info<RapicornAidaTest::ClickType> ()
{
  static const EnumValue _aida_enumvalues_1013[] = {
    { int64_t (RapicornAidaTest::ClickType::CLICK_ON_PRESS), "CLICK_ON_PRESS", NULL, NULL },
    { int64_t (RapicornAidaTest::ClickType::CLICK_ON_RELEASE), "CLICK_ON_RELEASE", NULL, NULL },
    { int64_t (RapicornAidaTest::ClickType::CLICK_SLOW_REPEAT), "CLICK_SLOW_REPEAT", NULL, NULL },
    { int64_t (RapicornAidaTest::ClickType::CLICK_FAST_REPEAT), "CLICK_FAST_REPEAT", NULL, NULL },
    { int64_t (RapicornAidaTest::ClickType::CLICK_KEY_REPEAT), "CLICK_KEY_REPEAT", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("RapicornAidaTest::ClickType", 0, _aida_enumvalues_1013);
} // specialization

static const Aida::IntrospectionRegistry __aida_aux_data_clnt__RapicornAidaTest_MathExpressions_ = {
  "RapicornAidaTest::MathExpressions\0"
  "ENUM\0"
  "type=ENUM\0"
  "typename=RapicornAidaTest::MathExpressions\0"
  "RESULT_2.value=2\0"
  "RESULT_5.value=5\0"
  "RESULT_8.value=8\0"
  "RESULT_6.value=6\0"
  "RESULT_7.value=7\0"
  "RESULT_16.value=16\0"
  "RESULT_3.value=3\0"
  "RESULT_24.value=24\0"
  "RESULT_13.value=13\0"
  "RESULT_m2.value=-2\0"
  "RESULT_77.value=77\0"
  "RESULT_511.value=511\0"
};
template<> const EnumInfo&
enum_info<RapicornAidaTest::MathExpressions> ()
{
  static const EnumValue _aida_enumvalues_1014[] = {
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_2), "RESULT_2", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_5), "RESULT_5", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_8), "RESULT_8", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_6), "RESULT_6", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_7), "RESULT_7", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_16), "RESULT_16", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_3), "RESULT_3", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_24), "RESULT_24", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_13), "RESULT_13", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_m2), "RESULT_m2", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_77), "RESULT_77", NULL, NULL },
    { int64_t (RapicornAidaTest::MathExpressions::RESULT_511), "RESULT_511", NULL, NULL },
  };
  return ::Aida::EnumInfo::cached_enum_info ("RapicornAidaTest::MathExpressions", 0, _aida_enumvalues_1014);
} // specialization
} // Aida

#endif // __ENUMCC__aidacc_tests_t304_testpass_idl__

static_assert (Aida::TypeHash { AIDA_HASH___TYPENAME__ } ==
               Aida::TypeHash { 0x51cded9001a397cfULL, 0xb54ad82e7dba3ecdULL },
               "Expecting hash defined as:\n#define AIDA_HASH___TYPENAME__ 	0x51cded9001a397cfULL, 0xb54ad82e7dba3ecdULL");
static_assert (Aida::TypeHash { AIDA_HASH___AIDA_TYPELIST__ } ==
               Aida::TypeHash { 0x7e82df289d876d3fULL, 0xf8f5d4684116729cULL },
               "Expecting hash defined as:\n#define AIDA_HASH___AIDA_TYPELIST__ 	0x7e82df289d876d3fULL, 0xf8f5d4684116729cULL");
static_assert (Aida::TypeHash { AIDA_HASH___AIDA_AUX_DATA__ } ==
               Aida::TypeHash { 0x42fc748a3a55dc79ULL, 0x04053ea3795243f7ULL },
               "Expecting hash defined as:\n#define AIDA_HASH___AIDA_AUX_DATA__ 	0x42fc748a3a55dc79ULL, 0x04053ea3795243f7ULL");
static_assert (Aida::TypeHash { AIDA_HASH___AIDA_DIR__ } ==
               Aida::TypeHash { 0xa35c47733d813815ULL, 0x25c2ae6cf0d91567ULL },
               "Expecting hash defined as:\n#define AIDA_HASH___AIDA_DIR__ 	0xa35c47733d813815ULL, 0x25c2ae6cf0d91567ULL");
static_assert (Aida::TypeHash { AIDA_HASH___AIDA_GET__ } ==
               Aida::TypeHash { 0x4aed20bb93591defULL, 0xc75b192eab6983edULL },
               "Expecting hash defined as:\n#define AIDA_HASH___AIDA_GET__ 	0x4aed20bb93591defULL, 0xc75b192eab6983edULL");
static_assert (Aida::TypeHash { AIDA_HASH___AIDA_SET__ } ==
               Aida::TypeHash { 0x9b7396e68c10cd21ULL, 0x2d19eea7536aa1b9ULL },
               "Expecting hash defined as:\n#define AIDA_HASH___AIDA_SET__ 	0x9b7396e68c10cd21ULL, 0x2d19eea7536aa1b9ULL");
static_assert (Aida::TypeHash { AIDA_HASH___EVENT_ATTACH__ } ==
               Aida::TypeHash { 0xbfceda11a8b5f5f6ULL, 0x2848342815fe5acbULL },
               "Expecting hash defined as:\n#define AIDA_HASH___EVENT_ATTACH__ 	0xbfceda11a8b5f5f6ULL, 0x2848342815fe5acbULL");
static_assert (Aida::TypeHash { AIDA_HASH___EVENT_DETACHID__ } ==
               Aida::TypeHash { 0xd6c0b4477875ecc4ULL, 0x7ddefe71b4272a9bULL },
               "Expecting hash defined as:\n#define AIDA_HASH___EVENT_DETACHID__ 	0xd6c0b4477875ecc4ULL, 0x7ddefe71b4272a9bULL");
static_assert (Aida::TypeHash { AIDA_HASH___EVENT_CALLBACK__ } ==
               Aida::TypeHash { 0x74d6b010e16cff95ULL, 0x71917df9fae9c99fULL },
               "Expecting hash defined as:\n#define AIDA_HASH___EVENT_CALLBACK__ 	0x74d6b010e16cff95ULL, 0x71917df9fae9c99fULL");
