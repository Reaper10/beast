# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

ebeast-all: with_npm ebeast/vue-components.html
$(strip all-am): ebeast-all

EBEAST_MOSTLYCLEANFILES =

# Running ebeast:
# - Use 'make run' to start ebeast from the development tree, this ensures that libbse
#   is picked up from the development tree (instead of an installed version) and that
#   electron finds the ebeast app/ files.
# - DevTools can be activated with Shft+Ctrl+I when run from the devleopment tree.
#   To use DevTools on the installed ebeast bundle, install electron-devtools-installer
#   as npm package in $(pkginstalldir)/bundle/app/.
# - WHen DevTools are enabled, Shift+Ctrl+R can initiate an ebeast page reload.
#
# Considerations for building the ebeast bundle:
# - The target dir for all build rules has to be app/, because Electron expects to find the
#   file resources/app[.asar]/package.json on startup (unless extra args are given).
# - For .map files and a number of other references to work correctly, we have to build most
#   resources *inside* app/, using sources formerly copyied into app/.
# - Packaging the bundle with electron-packager takes quite some time, so we only build it
#   at installation time and cache the result in bundlecache/ (unless app/ changes).

# == ebeast files ==
ebeast_app_files = $(strip 		\
	ebeast/main.js			\
	ebeast/menus.js			\
)
ebeast_lint_html_files = $(strip	\
	ebeast/window.html		\
)
ebeast_lint_js_files = $(strip		\
	ebeast/*.js			\
	ebeast/vc/*.js			\
)

# == with_npm ==
if WITH_NPM
with_npm:		ebeast/.appstamp
install-exec-local:	ebeast-install
uninstall-local:	ebeast-uninstall
else
with_npm:
endif

# == ebeast/.npmstamp ==
ebeast/.npmstamp: ebeast/package.json.in ./config.status
	$(AM_V_GEN)
	$(Q) ./config.status --file ebeast/package.json
	$(Q) cd ebeast/ && npm install
	$(Q) touch $@
# npm install is expensive so keep node_modules/ across mostlyclean
EBEAST_NPM_CLEANFILES = ebeast/.npmstamp ebeast/package.json ebeast/node_modules/

# == ebeast/app/window.html ==
# Instead of adding window.html to ebeast_app_files, we use it as a stamp for the creation
# of ebeast/app/ and subdirectories. That's done so dependent rules don't need to be rerun
# because of frequently ebeast/app/ updates. It'd be simpler to let .npmstamp handle
# creation of ebeast/app/, but that'd mix in the time consuming 'npm install'.
ebeast/app/window.html: ebeast/window.html ebeast/.npmstamp # npm influences all app/ and asset builds
	$(AM_V_GEN)
	$(Q) rm -rf ebeast/app/
	$(Q) mkdir ebeast/app/ ebeast/app/vc ebeast/app/assets/
	$(Q) ln -s ../node_modules ebeast/app/
	$(Q) cp -P $< ebeast/app/
EBEAST_MOSTLYCLEANFILES += ebeast/app/

# == ebeast/.appstamp ==
ebeast/.appstamp: ebeast/app/window.html | ebeast/.lintstamp
ebeast/.appstamp: $(ebeast_app_files) $(EBEAST_APP_ASSETS_CSS) $(EBEAST_APP_ASSETS_VUE) ebeast/v8bse/v8bse.node
	$(AM_V_GEN)
	$(Q) rm -rf ebeast/bundlecache/				# avoid installing stale app/ files
	$(Q) cp -P $(ebeast_app_files) ebeast/app/
	$(Q) cp -L ebeast/v8bse/v8bse.node ebeast/app/assets/
	$(Q) cp -P ebeast/package.json ebeast/app/
	$(Q) touch $@
EBEAST_MOSTLYCLEANFILES += ebeast/.appstamp

# == EBEAST_APP_ASSETS_CSS ==
EBEAST_APP_ASSETS_CSS = ebeast/app/assets/stylesheets.css ebeast/app/assets/gradient-01.png
ebeast_scss_deps := ebeast/app.scss $(wildcard ebeast/vc/*.scss)
ebeast/app/assets/stylesheets.css: $(ebeast_scss_deps) ebeast/app/window.html
	$(QGEN) # NOTE: scss source and output file names must be final, because .map is derived from it
	$(Q) cp -P ebeast/app.scss ebeast/app/
	$(Q) cp -P ebeast/vc/*.scss ebeast/app/vc/
	$(Q) cd ebeast/app/ && ./node_modules/.bin/node-sass app.scss assets/stylesheets.css --source-map true
ebeast/app/assets/gradient-01.png: ebeast/app/assets/stylesheets.css Makefile
	$(AM_V_GEN) # generate non-banding gradient from stylesheets.css: gradient-01 { -im-convert: "..."; }
	$(Q)        # see: http://www.imagemagick.org/script/command-line-options.php#noise http://www.imagemagick.org/Usage/canvas/
	$(Q) tr '\n' ' ' < ebeast/app/assets/stylesheets.css | \
	     sed -nr 's/.*\bgradient-01\s*\{[^}]*-im-convert:\s*"([^"]*)"\s*[;}].*/\1/; T; p' > $(@:%.png=%.cli)
	$(Q) test -s $(@:%.png=%.cli) # check that we actually found the -im-convert directive
	$(Q) convert $$(cat $(@:%.png=%.cli)) $(@:%.png=%.tmp.png)
	$(Q) rm -f $(@:%.png=%.cli) && mv $(@:%.png=%.tmp.png) $@

# == ebeast_vc_vue_files ==
ebeast_vc_vue_files ?= # Construct the list of Vue component files from the require() statements in vc/bundle.js
ebeast_vc_uncomment_js = sed -nr 's,//.*$$,,g ; 1h ; 1!H ; $$ { g; s,/\*(\*[^/]|[^*])*\*/,,g ; p }' # beware, ignores quoted strings
ebeast_vc_grep_require = grep -o 'require *([^)]\+\.vue[^)]*)' | sed "s/require *( *['\"]//g ; s/['\"])//g"
ebeast/vc/components.inc: ebeast/vc/bundle.js	# list bundled components in ebeast_vc_vue_files
	@echo '  UPDATE  ' $@
	$(Q) echo "ebeast_vc_vue_files = \\"					 > $@.tmp
	$(Q) $(ebeast_vc_uncomment_js) ebeast/vc/bundle.js | \
	     $(ebeast_vc_grep_require) | sed 's,^\./,ebeast/vc/, ; s/$$/ \\/'	>> $@.tmp
	$(Q) mv $@.tmp $@
EBEAST_MOSTLYCLEANFILES += ebeast/vc/components.inc ebeast/vc/components.inc.tmp
-include ebeast/vc/components.inc		# include ebeast_vc_vue_files components list

# == EBEAST_APP_ASSETS_VUE ==
EBEAST_APP_ASSETS_VUE = ebeast/app/assets/components.js
EBEAST_VC_JS_FILES := $(wildcard ebeast/vc/*.js)
ebeast/app/assets/components.js: $(EBEAST_VC_JS_FILES) $(ebeast_vc_vue_files) ebeast/app/window.html $(ebeast_scss_deps) | ebeast/.lintstamp
	$(AM_V_GEN)
	@: # collect all 'require' dependencies of bundle.js in app/vc/
	$(Q) cp -P $(EBEAST_VC_JS_FILES) $(ebeast_vc_vue_files) ebeast/app/vc/
	@: # all files required by vc/bundle.js are present, generate assets/components.js
	$(Q) cd ebeast/app/ && \
	node_modules/.bin/browserify --node --debug -t vueify -e vc/bundle.js -o assets/components.js
	@: # check for component pitfalls
	@echo '  CHECK   ' 'Vue component file pitfalls'
	$(Q) for f in ebeast/app/vc/*.* ; do \
	  sed -e "s,^,$$f:," "$$f" | $(ebeast_vc_uncomment_js) | \
	  grep --color=auto '\b__dirname\b' && \
	  { echo 'Error: __dirname is invalid inside Vue component files' | grep --color=auto . ; rm $@ ; exit 1; } ; \
	done || :
	@: # purge build-only files
	$(Q) cd ebeast/app/vc/ && rm $(notdir $(EBEAST_VC_JS_FILES) $(ebeast_vc_vue_files))

# == ebeast/.lintstamp ==
ebeast/.lintstamp: $(ebeast_lint_js_files) $(ebeast_lint_html_files) $(ebeast_vc_vue_files) ebeast/.npmstamp
	$(AM_V_GEN)
	$(Q) rm -f $@
	$(Q) ebeast/node_modules/.bin/eslint -f unix $(ebeast_lint_js_files) $(ebeast_lint_html_files) $(ebeast_vc_vue_files)
	$(Q) touch $@
EBEAST_MOSTLYCLEANFILES += ebeast/.lintstamp

# == Docs for .vue files ==
ebeast/vue-components.html: $(ebeast_vc_vue_files) Makefile
	$(AM_V_GEN)
	$(Q) rm -f $(@:.html=.tmp1)
	$(Q) echo -e "# Vue Components \n\n" > $(@:.html=.tmp1)
	@: # extract <docs/> blocks from *.vue and use these as input to pandoc
	$(Q) for i in $(sort $(ebeast_vc_vue_files)) ; do \
	  sed -n '/^<docs>\s*$$/{ :loop n; /^<\/docs>/q; p;  b loop }'  < $$i >> $(@:.html=.tmp1) || exit $$? ; \
	  echo >> $(@:.html=.tmp1) ; \
	done
	$(Q) sed 's/^  // ; s/^### /\n### /' < $(@:.html=.tmp1) > $(@:.html=.tmp2)
	$(Q) $(PANDOC) --columns=9999 -f markdown_github+pandoc_title_block-hard_line_breaks -t html -s -o $@ $(@:.html=.tmp2)
	$(Q) rm -f $(@:.html=.tmp*)
EBEAST_MOSTLYCLEANFILES += ebeast/vue-components.html

# == ebeast/bundlecache/ ==
ebeast/bundlecache/ebeast: ebeast/.appstamp
	@echo "  BUILD   " $(@D);
	$(Q) rm -rf ebeast/bundlecache/ ebeast/bundletemp/
	$(Q) ebeast/node_modules/.bin/electron-packager ebeast/app ebeast --out=ebeast/bundletemp
	$(Q) mv `for f in ebeast/bundletemp/*/ ; do :; done && echo $$f` ebeast/bundletemp/bundlecache/ # rename <appname>-<platform>-<arch>/
	@: # bundle polishing goes here...
	$(Q) mv ebeast/bundletemp/bundlecache/ ebeast/
	$(Q) rmdir ebeast/bundletemp
	$(Q) test -x ebeast/bundlecache/ebeast
EBEAST_MOSTLYCLEANFILES += ebeast/bundlecache/ ebeast/bundletemp/

# == ebeast/ installations ==
ebeast-install: ebeast/bundlecache/ebeast
	$(MKDIR_P) "$(DESTDIR)$(pkginstalldir)" "$(DESTDIR)$(pkginstalldir)/bin"
	rm -rf "$(DESTDIR)$(pkginstalldir)/bundle" "$(DESTDIR)$(pkginstalldir)/app"
	cp -RP ebeast/bundlecache "$(DESTDIR)$(pkginstalldir)/bundle"
	mv "$(DESTDIR)$(pkginstalldir)/bundle/resources/app" "$(DESTDIR)$(pkginstalldir)/bundle/"
	ln -s ../app "$(DESTDIR)$(pkginstalldir)/bundle/resources/app"
	ln -sf ../bundle/ebeast "$(DESTDIR)$(pkginstalldir)/bin/ebeast"
ebeast-uninstall:
	rm -rf "$(DESTDIR)$(pkginstalldir)/bundle/" "$(DESTDIR)$(pkginstalldir)/app/" "$(DESTDIR)$(pkginstalldir)/bin/ebeast"

# == ebeast-run ==
ebeast-run: ebeast/.appstamp ebeast/vue-components.html
	export ELECTRON_ENABLE_LOGGING=1 && \
	$(GTK2_DARK) \
	LD_PRELOAD="$(abs_top_builddir)/bse/.libs/libbse-@MAJOR@.so" \
	ebeast/node_modules/electron/dist/electron ebeast/app
# NOTE1, prefer LD_PRELOAD over LD_LIBRARY_PATH, to pick up $(builddir)/libbse *before* /usr/lib/libbse
# NOTE2, add --js-flags="--expose-gc" to the command line to enable global.gc();
# If libdbusmenu-glib.so is missing, electron 1.4.15 displays a Gtk+2 menu bar, ignoring
# the BrowserWindow.darkTheme option. Here, we preselect a commonly installed dark Gtk+2
# theme if it's present.
GTK2_DARK = $(shell test -f /usr/share/themes/Ambiance/gtk-2.0/gtkrc && echo 'GTK2_RC_FILES=/usr/share/themes/Ambiance/gtk-2.0/gtkrc')

# == ebeast-clean ==
ebeast-mostlyclean: ebeast-v8bse-clean
	rm -f $(filter-out %/, $(EBEAST_MOSTLYCLEANFILES))
	rm -fr $(filter %/, $(EBEAST_MOSTLYCLEANFILES))
ebeast-clean: ebeast-mostlyclean
	rm -rf $(EBEAST_NPM_CLEANFILES)
.PHONY: ebeast-clean ebeast-mostlyclean
mostlyclean-local: ebeast-clean
