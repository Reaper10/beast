# BEAST & BSE						-*-mode:makefile;-*-
# This Source Code Form is licensed MPL-2.0: http://mozilla.org/MPL/2.0

# declare variables that we might want to use += on.
EXTRA_HEADERS=
MAINTAINERCLEANFILES=$(GENERATED)
CLEANFILES=$(GENERATED_CLEANFILES)
MOSTLYCLEANFILES=
GENERATED_CLEANFILES=
GENERATED=$(strip $(GENERATED_CLEANFILES))
EXTRA_DIST=
noinst_DATA=

# == Verbosity ==
Q       = $(if $(findstring 1, $(V)) ,, @)
QGEN    = $(Q:@=@echo '  GEN     ' $@; )
QTEST   = @echo '  TEST    ' $@;
QSTDERR = $(Q:@=2>/dev/null)
QSTDOUT = $(Q:@=1>/dev/null)
QSTDIO  = $(Q:@=1>/dev/null 2>&1)
QDIE    = bash -c 'echo "  ERROR    $@: $$@" >&2; exit 127' _

# == GITSTAMP ==
# list of stamp files touched by commits
GITSTAMP = $(shell G=$$(git rev-parse --git-dir 2>/dev/null); test -z "$$G" -o ! -e "$$G/logs/HEAD" || echo "$$G/logs/HEAD")

# == Download ==
# recursive rule supported by all Makefiles to download files hosted online
.PHONY: download download-recursive download-local
download: download-local download-recursive
download-recursive:
	$(Q) for subdir in $(SUBDIRS) ; do test "$$subdir" = '.' || $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) download || exit $$? ; done

# == extra-gitdist ==
extra-gitdist:
	@test -z "$(EXTRA_DIST)" || echo "  TAR      $(patsubst %, $(subdir)/%, $(EXTRA_DIST))"
	$(Q) test -w "$(EXTRA_GITDIST_DIR)" || { echo '$@: missing EXTRA_GITDIST_DIR' >&2; false; }
	@for subdir in $(SUBDIRS) ; do						\
	  test "$$subdir" = '.' ||						\
	    $(MAKE) $(AM_MAKEFLAGS) -C "$$subdir"				\
		$(if $(findstring 1, $(V)),, --no-print-directory) $@ ||	\
	    exit 1 ;								\
	done
	$(Q) for file in $(EXTRA_DIST) ; do					\
	  cp -a --parent "$$file" "$(EXTRA_GITDIST_DIR)/$(subdir)/" ||		\
	  exit 1;								\
	done
.PHONY: extra-gitdist

# === check: check-before / check-after ===
.PHONY: check-before check-after
check-am: check-before
check-local: check-after
check-local: ; @:

# == TAPTESTS ==
# avoid running tests through taptool.sh which tends to e.g. hide segfaults
TAPTESTS =
TAPRUNS  = $(addsuffix --testrun, $(TAPTESTS))
.PHONY: check-taptests $(TAPRUNS)
check-taptests: $(TAPRUNS)
$(TAPRUNS): %--testrun: %	# static pattern rule - also works for phony targets
	@echo "  RUN     " $(@:%--testrun=%)
	$(Q) $(abspath $(@:%--testrun=%))
check: check-taptests

# === slowcheck ===
# recursive rule supported by all Makefiles to run time consuming checks
.PHONY: slowcheck slowcheck-recursive slowcheck-SLOWTESTS
slowcheck: all slowcheck-recursive slowcheck-SLOWTESTS
slowcheck-recursive:
	$(Q) for subdir in $(SUBDIRS) ; do			\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) slowcheck ||	\
	    exit 1 ;						\
	done
slowcheck-SLOWTESTS:
	$(Q) for tst in $(SLOWTESTS) ; do \
	  ./$$tst --test-slow && echo "PASS: $$tst" || exit 1 ;		\
	done
	$(Q) MESSAGETEXT="All $(words $(SLOWTESTS)) slow tests passed"	\
	&& [ 0 -lt $(words $(SLOWTESTS)) ]				\
	&& echo $$MESSAGETEXT | sed 's/./=/g' && echo $$MESSAGETEXT	\
	&& echo $$MESSAGETEXT | sed 's/./=/g' || true
SLOWTESTS=

# === perf ===
# recursive rule supported by all Makefiles to run performance tests
.PHONY: perf perf-recursive perf-PERFTESTS
perf: all perf-recursive perf-PERFTESTS
perf-recursive:
	$(Q) for subdir in $(SUBDIRS) ; do			\
	  test "$$subdir" = '.' ||				\
	    $(MAKE) -C "$$subdir" $(AM_MAKEFLAGS) perf ||	\
	    exit 1 ;						\
	done
perf-PERFTESTS:
	$(Q) for tst in $(PERFTESTS) ; do \
	  ./$$tst --test-perf && echo "PASS: $$tst" || exit 1 ;		\
	done
	$(Q) MESSAGETEXT="All $(words $(PERFTESTS)) perf tests passed"	\
	&& [ 0 -lt $(words $(PERFTESTS)) ]				\
	&& echo $$MESSAGETEXT | sed 's/./=/g' && echo $$MESSAGETEXT	\
	&& echo $$MESSAGETEXT | sed 's/./=/g' || true
PERFTESTS=

# === ALLTESTS ===
ALLTESTS = $(TESTS) $(TAPTESTS) $(SLOWTESTS) $(PERFTESTS) # used in noinst_PROGRAMS

# === report ===
.PHONY: report
report: all
	@export   REPORTFILE="$(REPORTFILE)" && [ -z "$$REPORTFILE" ]		\
	&& export REPORTFILE="$(shell pwd)/report.out"				\
	&& set -eo pipefail && ( :						\
	  && echo -n    "#TSTREPORT: git: "	     && date --iso-8601=seconds	\
	  && git describe --abbrev=99						\
	  && echo -n    "#TSTREPORT: install: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) install 					\
	  && echo -n    "#TSTREPORT: check: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) check 					\
	  && echo -n    "#TSTREPORT: slowcheck: "    && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) slowcheck 					\
	  && echo -n    "#TSTREPORT: perf: "	     && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) perf 					\
	  && echo -n    "#TSTREPORT: installcheck: " && date --iso-8601=seconds	\
	  && $(MAKE) $(AM_MAKEFLAGS) installcheck				\
	  && echo -n    "#TSTREPORT: done: "	     && date --iso-8601=seconds	\
	) 2>&1 | tee "$$REPORTFILE"
